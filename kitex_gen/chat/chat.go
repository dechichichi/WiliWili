// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package chat

import (
	"context"
	"fmt"
	"strings"
)

type ChatReq struct {
	TargetUid string `thrift:"target_uid,1,required" frugal:"1,required,string" json:"target_uid"`
	Content   string `thrift:"content,2,required" frugal:"2,required,string" json:"content"`
}

func NewChatReq() *ChatReq {
	return &ChatReq{}
}

func (p *ChatReq) InitDefault() {
}

func (p *ChatReq) GetTargetUid() (v string) {
	return p.TargetUid
}

func (p *ChatReq) GetContent() (v string) {
	return p.Content
}
func (p *ChatReq) SetTargetUid(val string) {
	p.TargetUid = val
}
func (p *ChatReq) SetContent(val string) {
	p.Content = val
}

func (p *ChatReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatReq(%+v)", *p)
}

func (p *ChatReq) DeepEqual(ano *ChatReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TargetUid) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *ChatReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TargetUid, src) != 0 {
		return false
	}
	return true
}
func (p *ChatReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_ChatReq = map[int16]string{
	1: "target_uid",
	2: "content",
}

type ChatResp struct {
}

func NewChatResp() *ChatResp {
	return &ChatResp{}
}

func (p *ChatResp) InitDefault() {
}

func (p *ChatResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatResp(%+v)", *p)
}

func (p *ChatResp) DeepEqual(ano *ChatResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

var fieldIDToName_ChatResp = map[int16]string{}

type ChatService interface {
	Chat(ctx context.Context, req *ChatReq) (r *ChatResp, err error)
}

type ChatServiceChatArgs struct {
	Req *ChatReq `thrift:"req,1" frugal:"1,default,ChatReq" json:"req"`
}

func NewChatServiceChatArgs() *ChatServiceChatArgs {
	return &ChatServiceChatArgs{}
}

func (p *ChatServiceChatArgs) InitDefault() {
}

var ChatServiceChatArgs_Req_DEFAULT *ChatReq

func (p *ChatServiceChatArgs) GetReq() (v *ChatReq) {
	if !p.IsSetReq() {
		return ChatServiceChatArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ChatServiceChatArgs) SetReq(val *ChatReq) {
	p.Req = val
}

func (p *ChatServiceChatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ChatServiceChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceChatArgs(%+v)", *p)
}

func (p *ChatServiceChatArgs) DeepEqual(ano *ChatServiceChatArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ChatServiceChatArgs) Field1DeepEqual(src *ChatReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_ChatServiceChatArgs = map[int16]string{
	1: "req",
}

type ChatServiceChatResult struct {
	Success *ChatResp `thrift:"success,0,optional" frugal:"0,optional,ChatResp" json:"success,omitempty"`
}

func NewChatServiceChatResult() *ChatServiceChatResult {
	return &ChatServiceChatResult{}
}

func (p *ChatServiceChatResult) InitDefault() {
}

var ChatServiceChatResult_Success_DEFAULT *ChatResp

func (p *ChatServiceChatResult) GetSuccess() (v *ChatResp) {
	if !p.IsSetSuccess() {
		return ChatServiceChatResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ChatServiceChatResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChatResp)
}

func (p *ChatServiceChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ChatServiceChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatServiceChatResult(%+v)", *p)
}

func (p *ChatServiceChatResult) DeepEqual(ano *ChatServiceChatResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ChatServiceChatResult) Field0DeepEqual(src *ChatResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_ChatServiceChatResult = map[int16]string{
	0: "success",
}

// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package networking

import (
	"context"
	"fmt"
)

type FollowOperationReq struct {
	UserId     int64 `thrift:"userId,1,required" frugal:"1,required,i64" json:"userId"`
	FollowerId int64 `thrift:"followerId,2,required" frugal:"2,required,i64" json:"followerId"`
}

func NewFollowOperationReq() *FollowOperationReq {
	return &FollowOperationReq{}
}

func (p *FollowOperationReq) InitDefault() {
}

func (p *FollowOperationReq) GetUserId() (v int64) {
	return p.UserId
}

func (p *FollowOperationReq) GetFollowerId() (v int64) {
	return p.FollowerId
}
func (p *FollowOperationReq) SetUserId(val int64) {
	p.UserId = val
}
func (p *FollowOperationReq) SetFollowerId(val int64) {
	p.FollowerId = val
}

func (p *FollowOperationReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowOperationReq(%+v)", *p)
}

func (p *FollowOperationReq) DeepEqual(ano *FollowOperationReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.FollowerId) {
		return false
	}
	return true
}

func (p *FollowOperationReq) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *FollowOperationReq) Field2DeepEqual(src int64) bool {

	if p.FollowerId != src {
		return false
	}
	return true
}

var fieldIDToName_FollowOperationReq = map[int16]string{
	1: "userId",
	2: "followerId",
}

type FollowOperationResp struct {
	Success bool `thrift:"success,1,required" frugal:"1,required,bool" json:"success"`
}

func NewFollowOperationResp() *FollowOperationResp {
	return &FollowOperationResp{}
}

func (p *FollowOperationResp) InitDefault() {
}

func (p *FollowOperationResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *FollowOperationResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *FollowOperationResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowOperationResp(%+v)", *p)
}

func (p *FollowOperationResp) DeepEqual(ano *FollowOperationResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FollowOperationResp) Field1DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}

var fieldIDToName_FollowOperationResp = map[int16]string{
	1: "success",
}

type FollowListReq struct {
	UserId int64 `thrift:"userId,1,required" frugal:"1,required,i64" json:"userId"`
}

func NewFollowListReq() *FollowListReq {
	return &FollowListReq{}
}

func (p *FollowListReq) InitDefault() {
}

func (p *FollowListReq) GetUserId() (v int64) {
	return p.UserId
}
func (p *FollowListReq) SetUserId(val int64) {
	p.UserId = val
}

func (p *FollowListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowListReq(%+v)", *p)
}

func (p *FollowListReq) DeepEqual(ano *FollowListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *FollowListReq) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_FollowListReq = map[int16]string{
	1: "userId",
}

type FollowListResp struct {
	FollowList []int64 `thrift:"followList,1,required" frugal:"1,required,list<i64>" json:"followList"`
}

func NewFollowListResp() *FollowListResp {
	return &FollowListResp{}
}

func (p *FollowListResp) InitDefault() {
}

func (p *FollowListResp) GetFollowList() (v []int64) {
	return p.FollowList
}
func (p *FollowListResp) SetFollowList(val []int64) {
	p.FollowList = val
}

func (p *FollowListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowListResp(%+v)", *p)
}

func (p *FollowListResp) DeepEqual(ano *FollowListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FollowList) {
		return false
	}
	return true
}

func (p *FollowListResp) Field1DeepEqual(src []int64) bool {

	if len(p.FollowList) != len(src) {
		return false
	}
	for i, v := range p.FollowList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

var fieldIDToName_FollowListResp = map[int16]string{
	1: "followList",
}

type FollowerListReq struct {
	UserId int64 `thrift:"userId,1,required" frugal:"1,required,i64" json:"userId"`
}

func NewFollowerListReq() *FollowerListReq {
	return &FollowerListReq{}
}

func (p *FollowerListReq) InitDefault() {
}

func (p *FollowerListReq) GetUserId() (v int64) {
	return p.UserId
}
func (p *FollowerListReq) SetUserId(val int64) {
	p.UserId = val
}

func (p *FollowerListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowerListReq(%+v)", *p)
}

func (p *FollowerListReq) DeepEqual(ano *FollowerListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *FollowerListReq) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_FollowerListReq = map[int16]string{
	1: "userId",
}

type FollowerListResp struct {
	FollowerList []int64 `thrift:"followerList,1,required" frugal:"1,required,list<i64>" json:"followerList"`
}

func NewFollowerListResp() *FollowerListResp {
	return &FollowerListResp{}
}

func (p *FollowerListResp) InitDefault() {
}

func (p *FollowerListResp) GetFollowerList() (v []int64) {
	return p.FollowerList
}
func (p *FollowerListResp) SetFollowerList(val []int64) {
	p.FollowerList = val
}

func (p *FollowerListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowerListResp(%+v)", *p)
}

func (p *FollowerListResp) DeepEqual(ano *FollowerListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FollowerList) {
		return false
	}
	return true
}

func (p *FollowerListResp) Field1DeepEqual(src []int64) bool {

	if len(p.FollowerList) != len(src) {
		return false
	}
	for i, v := range p.FollowerList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

var fieldIDToName_FollowerListResp = map[int16]string{
	1: "followerList",
}

type FriendListReq struct {
	UserId int64 `thrift:"userId,1,required" frugal:"1,required,i64" json:"userId"`
}

func NewFriendListReq() *FriendListReq {
	return &FriendListReq{}
}

func (p *FriendListReq) InitDefault() {
}

func (p *FriendListReq) GetUserId() (v int64) {
	return p.UserId
}
func (p *FriendListReq) SetUserId(val int64) {
	p.UserId = val
}

func (p *FriendListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendListReq(%+v)", *p)
}

func (p *FriendListReq) DeepEqual(ano *FriendListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *FriendListReq) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_FriendListReq = map[int16]string{
	1: "userId",
}

type FriendListResp struct {
	FriendList []int64 `thrift:"friendList,1,required" frugal:"1,required,list<i64>" json:"friendList"`
}

func NewFriendListResp() *FriendListResp {
	return &FriendListResp{}
}

func (p *FriendListResp) InitDefault() {
}

func (p *FriendListResp) GetFriendList() (v []int64) {
	return p.FriendList
}
func (p *FriendListResp) SetFriendList(val []int64) {
	p.FriendList = val
}

func (p *FriendListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendListResp(%+v)", *p)
}

func (p *FriendListResp) DeepEqual(ano *FriendListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FriendList) {
		return false
	}
	return true
}

func (p *FriendListResp) Field1DeepEqual(src []int64) bool {

	if len(p.FriendList) != len(src) {
		return false
	}
	for i, v := range p.FriendList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

var fieldIDToName_FriendListResp = map[int16]string{
	1: "friendList",
}

type FollowService interface {
	Follow(ctx context.Context, req *FollowOperationReq) (r *FollowOperationResp, err error)

	GetFollowList(ctx context.Context, req *FollowListReq) (r *FollowListResp, err error)

	GetFollowerList(ctx context.Context, req *FollowerListReq) (r *FollowerListResp, err error)

	GetFriendList(ctx context.Context, req *FriendListReq) (r *FriendListResp, err error)
}

type FollowServiceFollowArgs struct {
	Req *FollowOperationReq `thrift:"req,1" frugal:"1,default,FollowOperationReq" json:"req"`
}

func NewFollowServiceFollowArgs() *FollowServiceFollowArgs {
	return &FollowServiceFollowArgs{}
}

func (p *FollowServiceFollowArgs) InitDefault() {
}

var FollowServiceFollowArgs_Req_DEFAULT *FollowOperationReq

func (p *FollowServiceFollowArgs) GetReq() (v *FollowOperationReq) {
	if !p.IsSetReq() {
		return FollowServiceFollowArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowServiceFollowArgs) SetReq(val *FollowOperationReq) {
	p.Req = val
}

func (p *FollowServiceFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowServiceFollowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceFollowArgs(%+v)", *p)
}

func (p *FollowServiceFollowArgs) DeepEqual(ano *FollowServiceFollowArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FollowServiceFollowArgs) Field1DeepEqual(src *FollowOperationReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_FollowServiceFollowArgs = map[int16]string{
	1: "req",
}

type FollowServiceFollowResult struct {
	Success *FollowOperationResp `thrift:"success,0,optional" frugal:"0,optional,FollowOperationResp" json:"success,omitempty"`
}

func NewFollowServiceFollowResult() *FollowServiceFollowResult {
	return &FollowServiceFollowResult{}
}

func (p *FollowServiceFollowResult) InitDefault() {
}

var FollowServiceFollowResult_Success_DEFAULT *FollowOperationResp

func (p *FollowServiceFollowResult) GetSuccess() (v *FollowOperationResp) {
	if !p.IsSetSuccess() {
		return FollowServiceFollowResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowServiceFollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*FollowOperationResp)
}

func (p *FollowServiceFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowServiceFollowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceFollowResult(%+v)", *p)
}

func (p *FollowServiceFollowResult) DeepEqual(ano *FollowServiceFollowResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FollowServiceFollowResult) Field0DeepEqual(src *FollowOperationResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_FollowServiceFollowResult = map[int16]string{
	0: "success",
}

type FollowServiceGetFollowListArgs struct {
	Req *FollowListReq `thrift:"req,1" frugal:"1,default,FollowListReq" json:"req"`
}

func NewFollowServiceGetFollowListArgs() *FollowServiceGetFollowListArgs {
	return &FollowServiceGetFollowListArgs{}
}

func (p *FollowServiceGetFollowListArgs) InitDefault() {
}

var FollowServiceGetFollowListArgs_Req_DEFAULT *FollowListReq

func (p *FollowServiceGetFollowListArgs) GetReq() (v *FollowListReq) {
	if !p.IsSetReq() {
		return FollowServiceGetFollowListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowServiceGetFollowListArgs) SetReq(val *FollowListReq) {
	p.Req = val
}

func (p *FollowServiceGetFollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowServiceGetFollowListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceGetFollowListArgs(%+v)", *p)
}

func (p *FollowServiceGetFollowListArgs) DeepEqual(ano *FollowServiceGetFollowListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FollowServiceGetFollowListArgs) Field1DeepEqual(src *FollowListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_FollowServiceGetFollowListArgs = map[int16]string{
	1: "req",
}

type FollowServiceGetFollowListResult struct {
	Success *FollowListResp `thrift:"success,0,optional" frugal:"0,optional,FollowListResp" json:"success,omitempty"`
}

func NewFollowServiceGetFollowListResult() *FollowServiceGetFollowListResult {
	return &FollowServiceGetFollowListResult{}
}

func (p *FollowServiceGetFollowListResult) InitDefault() {
}

var FollowServiceGetFollowListResult_Success_DEFAULT *FollowListResp

func (p *FollowServiceGetFollowListResult) GetSuccess() (v *FollowListResp) {
	if !p.IsSetSuccess() {
		return FollowServiceGetFollowListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowServiceGetFollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*FollowListResp)
}

func (p *FollowServiceGetFollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowServiceGetFollowListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceGetFollowListResult(%+v)", *p)
}

func (p *FollowServiceGetFollowListResult) DeepEqual(ano *FollowServiceGetFollowListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FollowServiceGetFollowListResult) Field0DeepEqual(src *FollowListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_FollowServiceGetFollowListResult = map[int16]string{
	0: "success",
}

type FollowServiceGetFollowerListArgs struct {
	Req *FollowerListReq `thrift:"req,1" frugal:"1,default,FollowerListReq" json:"req"`
}

func NewFollowServiceGetFollowerListArgs() *FollowServiceGetFollowerListArgs {
	return &FollowServiceGetFollowerListArgs{}
}

func (p *FollowServiceGetFollowerListArgs) InitDefault() {
}

var FollowServiceGetFollowerListArgs_Req_DEFAULT *FollowerListReq

func (p *FollowServiceGetFollowerListArgs) GetReq() (v *FollowerListReq) {
	if !p.IsSetReq() {
		return FollowServiceGetFollowerListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowServiceGetFollowerListArgs) SetReq(val *FollowerListReq) {
	p.Req = val
}

func (p *FollowServiceGetFollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowServiceGetFollowerListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceGetFollowerListArgs(%+v)", *p)
}

func (p *FollowServiceGetFollowerListArgs) DeepEqual(ano *FollowServiceGetFollowerListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FollowServiceGetFollowerListArgs) Field1DeepEqual(src *FollowerListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_FollowServiceGetFollowerListArgs = map[int16]string{
	1: "req",
}

type FollowServiceGetFollowerListResult struct {
	Success *FollowerListResp `thrift:"success,0,optional" frugal:"0,optional,FollowerListResp" json:"success,omitempty"`
}

func NewFollowServiceGetFollowerListResult() *FollowServiceGetFollowerListResult {
	return &FollowServiceGetFollowerListResult{}
}

func (p *FollowServiceGetFollowerListResult) InitDefault() {
}

var FollowServiceGetFollowerListResult_Success_DEFAULT *FollowerListResp

func (p *FollowServiceGetFollowerListResult) GetSuccess() (v *FollowerListResp) {
	if !p.IsSetSuccess() {
		return FollowServiceGetFollowerListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowServiceGetFollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*FollowerListResp)
}

func (p *FollowServiceGetFollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowServiceGetFollowerListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceGetFollowerListResult(%+v)", *p)
}

func (p *FollowServiceGetFollowerListResult) DeepEqual(ano *FollowServiceGetFollowerListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FollowServiceGetFollowerListResult) Field0DeepEqual(src *FollowerListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_FollowServiceGetFollowerListResult = map[int16]string{
	0: "success",
}

type FollowServiceGetFriendListArgs struct {
	Req *FriendListReq `thrift:"req,1" frugal:"1,default,FriendListReq" json:"req"`
}

func NewFollowServiceGetFriendListArgs() *FollowServiceGetFriendListArgs {
	return &FollowServiceGetFriendListArgs{}
}

func (p *FollowServiceGetFriendListArgs) InitDefault() {
}

var FollowServiceGetFriendListArgs_Req_DEFAULT *FriendListReq

func (p *FollowServiceGetFriendListArgs) GetReq() (v *FriendListReq) {
	if !p.IsSetReq() {
		return FollowServiceGetFriendListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *FollowServiceGetFriendListArgs) SetReq(val *FriendListReq) {
	p.Req = val
}

func (p *FollowServiceGetFriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FollowServiceGetFriendListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceGetFriendListArgs(%+v)", *p)
}

func (p *FollowServiceGetFriendListArgs) DeepEqual(ano *FollowServiceGetFriendListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *FollowServiceGetFriendListArgs) Field1DeepEqual(src *FriendListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_FollowServiceGetFriendListArgs = map[int16]string{
	1: "req",
}

type FollowServiceGetFriendListResult struct {
	Success *FriendListResp `thrift:"success,0,optional" frugal:"0,optional,FriendListResp" json:"success,omitempty"`
}

func NewFollowServiceGetFriendListResult() *FollowServiceGetFriendListResult {
	return &FollowServiceGetFriendListResult{}
}

func (p *FollowServiceGetFriendListResult) InitDefault() {
}

var FollowServiceGetFriendListResult_Success_DEFAULT *FriendListResp

func (p *FollowServiceGetFriendListResult) GetSuccess() (v *FriendListResp) {
	if !p.IsSetSuccess() {
		return FollowServiceGetFriendListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FollowServiceGetFriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*FriendListResp)
}

func (p *FollowServiceGetFriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FollowServiceGetFriendListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FollowServiceGetFriendListResult(%+v)", *p)
}

func (p *FollowServiceGetFriendListResult) DeepEqual(ano *FollowServiceGetFriendListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *FollowServiceGetFriendListResult) Field0DeepEqual(src *FriendListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_FollowServiceGetFriendListResult = map[int16]string{
	0: "success",
}

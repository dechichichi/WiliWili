// Code generated by Kitex v0.12.1. DO NOT EDIT.

package comment

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	comment "wiliwili/kitex_gen/comment"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CommentVideo": kitex.NewMethodInfo(
		commentVideoHandler,
		newCommentCommentVideoArgs,
		newCommentCommentVideoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ReplyComment": kitex.NewMethodInfo(
		replyCommentHandler,
		newCommentReplyCommentArgs,
		newCommentReplyCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVideoCommentList": kitex.NewMethodInfo(
		getVideoCommentListHandler,
		newCommentGetVideoCommentListArgs,
		newCommentGetVideoCommentListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetCommentReplyList": kitex.NewMethodInfo(
		getCommentReplyListHandler,
		newCommentGetCommentReplyListArgs,
		newCommentGetCommentReplyListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteComment": kitex.NewMethodInfo(
		deleteCommentHandler,
		newCommentDeleteCommentArgs,
		newCommentDeleteCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	commentServiceInfo                = NewServiceInfo()
	commentServiceInfoForClient       = NewServiceInfoForClient()
	commentServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return commentServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return commentServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return commentServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "Comment"
	handlerType := (*comment.Comment)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "comment",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func commentVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentCommentVideoArgs)
	realResult := result.(*comment.CommentCommentVideoResult)
	success, err := handler.(comment.Comment).CommentVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentCommentVideoArgs() interface{} {
	return comment.NewCommentCommentVideoArgs()
}

func newCommentCommentVideoResult() interface{} {
	return comment.NewCommentCommentVideoResult()
}

func replyCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentReplyCommentArgs)
	realResult := result.(*comment.CommentReplyCommentResult)
	success, err := handler.(comment.Comment).ReplyComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentReplyCommentArgs() interface{} {
	return comment.NewCommentReplyCommentArgs()
}

func newCommentReplyCommentResult() interface{} {
	return comment.NewCommentReplyCommentResult()
}

func getVideoCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentGetVideoCommentListArgs)
	realResult := result.(*comment.CommentGetVideoCommentListResult)
	success, err := handler.(comment.Comment).GetVideoCommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentGetVideoCommentListArgs() interface{} {
	return comment.NewCommentGetVideoCommentListArgs()
}

func newCommentGetVideoCommentListResult() interface{} {
	return comment.NewCommentGetVideoCommentListResult()
}

func getCommentReplyListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentGetCommentReplyListArgs)
	realResult := result.(*comment.CommentGetCommentReplyListResult)
	success, err := handler.(comment.Comment).GetCommentReplyList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentGetCommentReplyListArgs() interface{} {
	return comment.NewCommentGetCommentReplyListArgs()
}

func newCommentGetCommentReplyListResult() interface{} {
	return comment.NewCommentGetCommentReplyListResult()
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentDeleteCommentArgs)
	realResult := result.(*comment.CommentDeleteCommentResult)
	success, err := handler.(comment.Comment).DeleteComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentDeleteCommentArgs() interface{} {
	return comment.NewCommentDeleteCommentArgs()
}

func newCommentDeleteCommentResult() interface{} {
	return comment.NewCommentDeleteCommentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CommentVideo(ctx context.Context, req *comment.CommentVideoReq) (r *comment.CommentVideoResp, err error) {
	var _args comment.CommentCommentVideoArgs
	_args.Req = req
	var _result comment.CommentCommentVideoResult
	if err = p.c.Call(ctx, "CommentVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReplyComment(ctx context.Context, req *comment.ReplyCommentReq) (r *comment.ReplyCommentResp, err error) {
	var _args comment.CommentReplyCommentArgs
	_args.Req = req
	var _result comment.CommentReplyCommentResult
	if err = p.c.Call(ctx, "ReplyComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoCommentList(ctx context.Context, req *comment.GetVideoCommentListReq) (r *comment.GetVideoCommentListResp, err error) {
	var _args comment.CommentGetVideoCommentListArgs
	_args.Req = req
	var _result comment.CommentGetVideoCommentListResult
	if err = p.c.Call(ctx, "GetVideoCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentReplyList(ctx context.Context, req *comment.GetCommentReplyListReq) (r *comment.GetCommentReplyListResp, err error) {
	var _args comment.CommentGetCommentReplyListArgs
	_args.Req = req
	var _result comment.CommentGetCommentReplyListResult
	if err = p.c.Call(ctx, "GetCommentReplyList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, req *comment.DeleteCommentReq) (r *comment.DeleteCommentResp, err error) {
	var _args comment.CommentDeleteCommentArgs
	_args.Req = req
	var _result comment.CommentDeleteCommentResult
	if err = p.c.Call(ctx, "DeleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package comment

import (
	"context"
	"fmt"
	"strings"
	"wiliwili/kitex_gen/model"
)

type CommentVideoReq struct {
	VideoId int64  `thrift:"videoId,1,required" frugal:"1,required,i64" json:"videoId"`
	Content string `thrift:"content,2,required" frugal:"2,required,string" json:"content"`
	UserId  int64  `thrift:"userId,3,required" frugal:"3,required,i64" json:"userId"`
}

func NewCommentVideoReq() *CommentVideoReq {
	return &CommentVideoReq{}
}

func (p *CommentVideoReq) InitDefault() {
}

func (p *CommentVideoReq) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *CommentVideoReq) GetContent() (v string) {
	return p.Content
}

func (p *CommentVideoReq) GetUserId() (v int64) {
	return p.UserId
}
func (p *CommentVideoReq) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *CommentVideoReq) SetContent(val string) {
	p.Content = val
}
func (p *CommentVideoReq) SetUserId(val int64) {
	p.UserId = val
}

func (p *CommentVideoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentVideoReq(%+v)", *p)
}

func (p *CommentVideoReq) DeepEqual(ano *CommentVideoReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *CommentVideoReq) Field1DeepEqual(src int64) bool {

	if p.VideoId != src {
		return false
	}
	return true
}
func (p *CommentVideoReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}
func (p *CommentVideoReq) Field3DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_CommentVideoReq = map[int16]string{
	1: "videoId",
	2: "content",
	3: "userId",
}

type CommentVideoResp struct {
	BaseResp *model.BaseResp `thrift:"baseResp,1,required" frugal:"1,required,model.BaseResp" json:"baseResp"`
}

func NewCommentVideoResp() *CommentVideoResp {
	return &CommentVideoResp{}
}

func (p *CommentVideoResp) InitDefault() {
}

var CommentVideoResp_BaseResp_DEFAULT *model.BaseResp

func (p *CommentVideoResp) GetBaseResp() (v *model.BaseResp) {
	if !p.IsSetBaseResp() {
		return CommentVideoResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CommentVideoResp) SetBaseResp(val *model.BaseResp) {
	p.BaseResp = val
}

func (p *CommentVideoResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CommentVideoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentVideoResp(%+v)", *p)
}

func (p *CommentVideoResp) DeepEqual(ano *CommentVideoResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CommentVideoResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommentVideoResp = map[int16]string{
	1: "baseResp",
}

type ReplyCommentReq struct {
	CommentId int64  `thrift:"commentId,1,required" frugal:"1,required,i64" json:"commentId"`
	Content   string `thrift:"content,2,required" frugal:"2,required,string" json:"content"`
	UserId    int64  `thrift:"userId,3,required" frugal:"3,required,i64" json:"userId"`
}

func NewReplyCommentReq() *ReplyCommentReq {
	return &ReplyCommentReq{}
}

func (p *ReplyCommentReq) InitDefault() {
}

func (p *ReplyCommentReq) GetCommentId() (v int64) {
	return p.CommentId
}

func (p *ReplyCommentReq) GetContent() (v string) {
	return p.Content
}

func (p *ReplyCommentReq) GetUserId() (v int64) {
	return p.UserId
}
func (p *ReplyCommentReq) SetCommentId(val int64) {
	p.CommentId = val
}
func (p *ReplyCommentReq) SetContent(val string) {
	p.Content = val
}
func (p *ReplyCommentReq) SetUserId(val int64) {
	p.UserId = val
}

func (p *ReplyCommentReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReplyCommentReq(%+v)", *p)
}

func (p *ReplyCommentReq) DeepEqual(ano *ReplyCommentReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CommentId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *ReplyCommentReq) Field1DeepEqual(src int64) bool {

	if p.CommentId != src {
		return false
	}
	return true
}
func (p *ReplyCommentReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}
func (p *ReplyCommentReq) Field3DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_ReplyCommentReq = map[int16]string{
	1: "commentId",
	2: "content",
	3: "userId",
}

type ReplyCommentResp struct {
	BaseResp *model.BaseResp `thrift:"baseResp,1,required" frugal:"1,required,model.BaseResp" json:"baseResp"`
}

func NewReplyCommentResp() *ReplyCommentResp {
	return &ReplyCommentResp{}
}

func (p *ReplyCommentResp) InitDefault() {
}

var ReplyCommentResp_BaseResp_DEFAULT *model.BaseResp

func (p *ReplyCommentResp) GetBaseResp() (v *model.BaseResp) {
	if !p.IsSetBaseResp() {
		return ReplyCommentResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ReplyCommentResp) SetBaseResp(val *model.BaseResp) {
	p.BaseResp = val
}

func (p *ReplyCommentResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ReplyCommentResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReplyCommentResp(%+v)", *p)
}

func (p *ReplyCommentResp) DeepEqual(ano *ReplyCommentResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ReplyCommentResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_ReplyCommentResp = map[int16]string{
	1: "baseResp",
}

type GetVideoCommentListReq struct {
	VideoId  int64 `thrift:"videoId,1,required" frugal:"1,required,i64" json:"videoId"`
	Page     int32 `thrift:"page,2,required" frugal:"2,required,i32" json:"page"`
	PageSize int32 `thrift:"pageSize,3,required" frugal:"3,required,i32" json:"pageSize"`
}

func NewGetVideoCommentListReq() *GetVideoCommentListReq {
	return &GetVideoCommentListReq{}
}

func (p *GetVideoCommentListReq) InitDefault() {
}

func (p *GetVideoCommentListReq) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *GetVideoCommentListReq) GetPage() (v int32) {
	return p.Page
}

func (p *GetVideoCommentListReq) GetPageSize() (v int32) {
	return p.PageSize
}
func (p *GetVideoCommentListReq) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *GetVideoCommentListReq) SetPage(val int32) {
	p.Page = val
}
func (p *GetVideoCommentListReq) SetPageSize(val int32) {
	p.PageSize = val
}

func (p *GetVideoCommentListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoCommentListReq(%+v)", *p)
}

func (p *GetVideoCommentListReq) DeepEqual(ano *GetVideoCommentListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Page) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *GetVideoCommentListReq) Field1DeepEqual(src int64) bool {

	if p.VideoId != src {
		return false
	}
	return true
}
func (p *GetVideoCommentListReq) Field2DeepEqual(src int32) bool {

	if p.Page != src {
		return false
	}
	return true
}
func (p *GetVideoCommentListReq) Field3DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

var fieldIDToName_GetVideoCommentListReq = map[int16]string{
	1: "videoId",
	2: "page",
	3: "pageSize",
}

type GetVideoCommentListResp struct {
	BaseResp    *model.BaseResp  `thrift:"baseResp,1,required" frugal:"1,required,model.BaseResp" json:"baseResp"`
	CommentList []*model.Comment `thrift:"commentList,2,required" frugal:"2,required,list<model.Comment>" json:"commentList"`
}

func NewGetVideoCommentListResp() *GetVideoCommentListResp {
	return &GetVideoCommentListResp{}
}

func (p *GetVideoCommentListResp) InitDefault() {
}

var GetVideoCommentListResp_BaseResp_DEFAULT *model.BaseResp

func (p *GetVideoCommentListResp) GetBaseResp() (v *model.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetVideoCommentListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *GetVideoCommentListResp) GetCommentList() (v []*model.Comment) {
	return p.CommentList
}
func (p *GetVideoCommentListResp) SetBaseResp(val *model.BaseResp) {
	p.BaseResp = val
}
func (p *GetVideoCommentListResp) SetCommentList(val []*model.Comment) {
	p.CommentList = val
}

func (p *GetVideoCommentListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetVideoCommentListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoCommentListResp(%+v)", *p)
}

func (p *GetVideoCommentListResp) DeepEqual(ano *GetVideoCommentListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.CommentList) {
		return false
	}
	return true
}

func (p *GetVideoCommentListResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetVideoCommentListResp) Field2DeepEqual(src []*model.Comment) bool {

	if len(p.CommentList) != len(src) {
		return false
	}
	for i, v := range p.CommentList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_GetVideoCommentListResp = map[int16]string{
	1: "baseResp",
	2: "commentList",
}

type GetCommentReplyListReq struct {
	CommentId int64 `thrift:"commentId,1,required" frugal:"1,required,i64" json:"commentId"`
	Page      int32 `thrift:"page,2,required" frugal:"2,required,i32" json:"page"`
	PageSize  int32 `thrift:"pageSize,3,required" frugal:"3,required,i32" json:"pageSize"`
}

func NewGetCommentReplyListReq() *GetCommentReplyListReq {
	return &GetCommentReplyListReq{}
}

func (p *GetCommentReplyListReq) InitDefault() {
}

func (p *GetCommentReplyListReq) GetCommentId() (v int64) {
	return p.CommentId
}

func (p *GetCommentReplyListReq) GetPage() (v int32) {
	return p.Page
}

func (p *GetCommentReplyListReq) GetPageSize() (v int32) {
	return p.PageSize
}
func (p *GetCommentReplyListReq) SetCommentId(val int64) {
	p.CommentId = val
}
func (p *GetCommentReplyListReq) SetPage(val int32) {
	p.Page = val
}
func (p *GetCommentReplyListReq) SetPageSize(val int32) {
	p.PageSize = val
}

func (p *GetCommentReplyListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCommentReplyListReq(%+v)", *p)
}

func (p *GetCommentReplyListReq) DeepEqual(ano *GetCommentReplyListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CommentId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Page) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *GetCommentReplyListReq) Field1DeepEqual(src int64) bool {

	if p.CommentId != src {
		return false
	}
	return true
}
func (p *GetCommentReplyListReq) Field2DeepEqual(src int32) bool {

	if p.Page != src {
		return false
	}
	return true
}
func (p *GetCommentReplyListReq) Field3DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

var fieldIDToName_GetCommentReplyListReq = map[int16]string{
	1: "commentId",
	2: "page",
	3: "pageSize",
}

type GetCommentReplyListResp struct {
	BaseResp    *model.BaseResp  `thrift:"baseResp,1,required" frugal:"1,required,model.BaseResp" json:"baseResp"`
	CommentList []*model.Comment `thrift:"commentList,2,required" frugal:"2,required,list<model.Comment>" json:"commentList"`
}

func NewGetCommentReplyListResp() *GetCommentReplyListResp {
	return &GetCommentReplyListResp{}
}

func (p *GetCommentReplyListResp) InitDefault() {
}

var GetCommentReplyListResp_BaseResp_DEFAULT *model.BaseResp

func (p *GetCommentReplyListResp) GetBaseResp() (v *model.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetCommentReplyListResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *GetCommentReplyListResp) GetCommentList() (v []*model.Comment) {
	return p.CommentList
}
func (p *GetCommentReplyListResp) SetBaseResp(val *model.BaseResp) {
	p.BaseResp = val
}
func (p *GetCommentReplyListResp) SetCommentList(val []*model.Comment) {
	p.CommentList = val
}

func (p *GetCommentReplyListResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetCommentReplyListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCommentReplyListResp(%+v)", *p)
}

func (p *GetCommentReplyListResp) DeepEqual(ano *GetCommentReplyListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.CommentList) {
		return false
	}
	return true
}

func (p *GetCommentReplyListResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetCommentReplyListResp) Field2DeepEqual(src []*model.Comment) bool {

	if len(p.CommentList) != len(src) {
		return false
	}
	for i, v := range p.CommentList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_GetCommentReplyListResp = map[int16]string{
	1: "baseResp",
	2: "commentList",
}

type DeleteCommentReq struct {
	CommentId int64 `thrift:"commentId,1,required" frugal:"1,required,i64" json:"commentId"`
	UserId    int64 `thrift:"userId,2,required" frugal:"2,required,i64" json:"userId"`
}

func NewDeleteCommentReq() *DeleteCommentReq {
	return &DeleteCommentReq{}
}

func (p *DeleteCommentReq) InitDefault() {
}

func (p *DeleteCommentReq) GetCommentId() (v int64) {
	return p.CommentId
}

func (p *DeleteCommentReq) GetUserId() (v int64) {
	return p.UserId
}
func (p *DeleteCommentReq) SetCommentId(val int64) {
	p.CommentId = val
}
func (p *DeleteCommentReq) SetUserId(val int64) {
	p.UserId = val
}

func (p *DeleteCommentReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCommentReq(%+v)", *p)
}

func (p *DeleteCommentReq) DeepEqual(ano *DeleteCommentReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CommentId) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *DeleteCommentReq) Field1DeepEqual(src int64) bool {

	if p.CommentId != src {
		return false
	}
	return true
}
func (p *DeleteCommentReq) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_DeleteCommentReq = map[int16]string{
	1: "commentId",
	2: "userId",
}

type DeleteCommentResp struct {
	BaseResp *model.BaseResp `thrift:"baseResp,1,required" frugal:"1,required,model.BaseResp" json:"baseResp"`
}

func NewDeleteCommentResp() *DeleteCommentResp {
	return &DeleteCommentResp{}
}

func (p *DeleteCommentResp) InitDefault() {
}

var DeleteCommentResp_BaseResp_DEFAULT *model.BaseResp

func (p *DeleteCommentResp) GetBaseResp() (v *model.BaseResp) {
	if !p.IsSetBaseResp() {
		return DeleteCommentResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeleteCommentResp) SetBaseResp(val *model.BaseResp) {
	p.BaseResp = val
}

func (p *DeleteCommentResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeleteCommentResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCommentResp(%+v)", *p)
}

func (p *DeleteCommentResp) DeepEqual(ano *DeleteCommentResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DeleteCommentResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_DeleteCommentResp = map[int16]string{
	1: "baseResp",
}

type Comment interface {
	CommentVideo(ctx context.Context, req *CommentVideoReq) (r *CommentVideoResp, err error)

	ReplyComment(ctx context.Context, req *ReplyCommentReq) (r *ReplyCommentResp, err error)

	GetVideoCommentList(ctx context.Context, req *GetVideoCommentListReq) (r *GetVideoCommentListResp, err error)

	GetCommentReplyList(ctx context.Context, req *GetCommentReplyListReq) (r *GetCommentReplyListResp, err error)

	DeleteComment(ctx context.Context, req *DeleteCommentReq) (r *DeleteCommentResp, err error)
}

type CommentCommentVideoArgs struct {
	Req *CommentVideoReq `thrift:"req,1" frugal:"1,default,CommentVideoReq" json:"req"`
}

func NewCommentCommentVideoArgs() *CommentCommentVideoArgs {
	return &CommentCommentVideoArgs{}
}

func (p *CommentCommentVideoArgs) InitDefault() {
}

var CommentCommentVideoArgs_Req_DEFAULT *CommentVideoReq

func (p *CommentCommentVideoArgs) GetReq() (v *CommentVideoReq) {
	if !p.IsSetReq() {
		return CommentCommentVideoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommentCommentVideoArgs) SetReq(val *CommentVideoReq) {
	p.Req = val
}

func (p *CommentCommentVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentCommentVideoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentCommentVideoArgs(%+v)", *p)
}

func (p *CommentCommentVideoArgs) DeepEqual(ano *CommentCommentVideoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommentCommentVideoArgs) Field1DeepEqual(src *CommentVideoReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommentCommentVideoArgs = map[int16]string{
	1: "req",
}

type CommentCommentVideoResult struct {
	Success *CommentVideoResp `thrift:"success,0,optional" frugal:"0,optional,CommentVideoResp" json:"success,omitempty"`
}

func NewCommentCommentVideoResult() *CommentCommentVideoResult {
	return &CommentCommentVideoResult{}
}

func (p *CommentCommentVideoResult) InitDefault() {
}

var CommentCommentVideoResult_Success_DEFAULT *CommentVideoResp

func (p *CommentCommentVideoResult) GetSuccess() (v *CommentVideoResp) {
	if !p.IsSetSuccess() {
		return CommentCommentVideoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommentCommentVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*CommentVideoResp)
}

func (p *CommentCommentVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentCommentVideoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentCommentVideoResult(%+v)", *p)
}

func (p *CommentCommentVideoResult) DeepEqual(ano *CommentCommentVideoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommentCommentVideoResult) Field0DeepEqual(src *CommentVideoResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommentCommentVideoResult = map[int16]string{
	0: "success",
}

type CommentReplyCommentArgs struct {
	Req *ReplyCommentReq `thrift:"req,1" frugal:"1,default,ReplyCommentReq" json:"req"`
}

func NewCommentReplyCommentArgs() *CommentReplyCommentArgs {
	return &CommentReplyCommentArgs{}
}

func (p *CommentReplyCommentArgs) InitDefault() {
}

var CommentReplyCommentArgs_Req_DEFAULT *ReplyCommentReq

func (p *CommentReplyCommentArgs) GetReq() (v *ReplyCommentReq) {
	if !p.IsSetReq() {
		return CommentReplyCommentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommentReplyCommentArgs) SetReq(val *ReplyCommentReq) {
	p.Req = val
}

func (p *CommentReplyCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentReplyCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentReplyCommentArgs(%+v)", *p)
}

func (p *CommentReplyCommentArgs) DeepEqual(ano *CommentReplyCommentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommentReplyCommentArgs) Field1DeepEqual(src *ReplyCommentReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommentReplyCommentArgs = map[int16]string{
	1: "req",
}

type CommentReplyCommentResult struct {
	Success *ReplyCommentResp `thrift:"success,0,optional" frugal:"0,optional,ReplyCommentResp" json:"success,omitempty"`
}

func NewCommentReplyCommentResult() *CommentReplyCommentResult {
	return &CommentReplyCommentResult{}
}

func (p *CommentReplyCommentResult) InitDefault() {
}

var CommentReplyCommentResult_Success_DEFAULT *ReplyCommentResp

func (p *CommentReplyCommentResult) GetSuccess() (v *ReplyCommentResp) {
	if !p.IsSetSuccess() {
		return CommentReplyCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommentReplyCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*ReplyCommentResp)
}

func (p *CommentReplyCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentReplyCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentReplyCommentResult(%+v)", *p)
}

func (p *CommentReplyCommentResult) DeepEqual(ano *CommentReplyCommentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommentReplyCommentResult) Field0DeepEqual(src *ReplyCommentResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommentReplyCommentResult = map[int16]string{
	0: "success",
}

type CommentGetVideoCommentListArgs struct {
	Req *GetVideoCommentListReq `thrift:"req,1" frugal:"1,default,GetVideoCommentListReq" json:"req"`
}

func NewCommentGetVideoCommentListArgs() *CommentGetVideoCommentListArgs {
	return &CommentGetVideoCommentListArgs{}
}

func (p *CommentGetVideoCommentListArgs) InitDefault() {
}

var CommentGetVideoCommentListArgs_Req_DEFAULT *GetVideoCommentListReq

func (p *CommentGetVideoCommentListArgs) GetReq() (v *GetVideoCommentListReq) {
	if !p.IsSetReq() {
		return CommentGetVideoCommentListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommentGetVideoCommentListArgs) SetReq(val *GetVideoCommentListReq) {
	p.Req = val
}

func (p *CommentGetVideoCommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentGetVideoCommentListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentGetVideoCommentListArgs(%+v)", *p)
}

func (p *CommentGetVideoCommentListArgs) DeepEqual(ano *CommentGetVideoCommentListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommentGetVideoCommentListArgs) Field1DeepEqual(src *GetVideoCommentListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommentGetVideoCommentListArgs = map[int16]string{
	1: "req",
}

type CommentGetVideoCommentListResult struct {
	Success *GetVideoCommentListResp `thrift:"success,0,optional" frugal:"0,optional,GetVideoCommentListResp" json:"success,omitempty"`
}

func NewCommentGetVideoCommentListResult() *CommentGetVideoCommentListResult {
	return &CommentGetVideoCommentListResult{}
}

func (p *CommentGetVideoCommentListResult) InitDefault() {
}

var CommentGetVideoCommentListResult_Success_DEFAULT *GetVideoCommentListResp

func (p *CommentGetVideoCommentListResult) GetSuccess() (v *GetVideoCommentListResp) {
	if !p.IsSetSuccess() {
		return CommentGetVideoCommentListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommentGetVideoCommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetVideoCommentListResp)
}

func (p *CommentGetVideoCommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentGetVideoCommentListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentGetVideoCommentListResult(%+v)", *p)
}

func (p *CommentGetVideoCommentListResult) DeepEqual(ano *CommentGetVideoCommentListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommentGetVideoCommentListResult) Field0DeepEqual(src *GetVideoCommentListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommentGetVideoCommentListResult = map[int16]string{
	0: "success",
}

type CommentGetCommentReplyListArgs struct {
	Req *GetCommentReplyListReq `thrift:"req,1" frugal:"1,default,GetCommentReplyListReq" json:"req"`
}

func NewCommentGetCommentReplyListArgs() *CommentGetCommentReplyListArgs {
	return &CommentGetCommentReplyListArgs{}
}

func (p *CommentGetCommentReplyListArgs) InitDefault() {
}

var CommentGetCommentReplyListArgs_Req_DEFAULT *GetCommentReplyListReq

func (p *CommentGetCommentReplyListArgs) GetReq() (v *GetCommentReplyListReq) {
	if !p.IsSetReq() {
		return CommentGetCommentReplyListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommentGetCommentReplyListArgs) SetReq(val *GetCommentReplyListReq) {
	p.Req = val
}

func (p *CommentGetCommentReplyListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentGetCommentReplyListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentGetCommentReplyListArgs(%+v)", *p)
}

func (p *CommentGetCommentReplyListArgs) DeepEqual(ano *CommentGetCommentReplyListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommentGetCommentReplyListArgs) Field1DeepEqual(src *GetCommentReplyListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommentGetCommentReplyListArgs = map[int16]string{
	1: "req",
}

type CommentGetCommentReplyListResult struct {
	Success *GetCommentReplyListResp `thrift:"success,0,optional" frugal:"0,optional,GetCommentReplyListResp" json:"success,omitempty"`
}

func NewCommentGetCommentReplyListResult() *CommentGetCommentReplyListResult {
	return &CommentGetCommentReplyListResult{}
}

func (p *CommentGetCommentReplyListResult) InitDefault() {
}

var CommentGetCommentReplyListResult_Success_DEFAULT *GetCommentReplyListResp

func (p *CommentGetCommentReplyListResult) GetSuccess() (v *GetCommentReplyListResp) {
	if !p.IsSetSuccess() {
		return CommentGetCommentReplyListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommentGetCommentReplyListResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCommentReplyListResp)
}

func (p *CommentGetCommentReplyListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentGetCommentReplyListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentGetCommentReplyListResult(%+v)", *p)
}

func (p *CommentGetCommentReplyListResult) DeepEqual(ano *CommentGetCommentReplyListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommentGetCommentReplyListResult) Field0DeepEqual(src *GetCommentReplyListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommentGetCommentReplyListResult = map[int16]string{
	0: "success",
}

type CommentDeleteCommentArgs struct {
	Req *DeleteCommentReq `thrift:"req,1" frugal:"1,default,DeleteCommentReq" json:"req"`
}

func NewCommentDeleteCommentArgs() *CommentDeleteCommentArgs {
	return &CommentDeleteCommentArgs{}
}

func (p *CommentDeleteCommentArgs) InitDefault() {
}

var CommentDeleteCommentArgs_Req_DEFAULT *DeleteCommentReq

func (p *CommentDeleteCommentArgs) GetReq() (v *DeleteCommentReq) {
	if !p.IsSetReq() {
		return CommentDeleteCommentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommentDeleteCommentArgs) SetReq(val *DeleteCommentReq) {
	p.Req = val
}

func (p *CommentDeleteCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentDeleteCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentDeleteCommentArgs(%+v)", *p)
}

func (p *CommentDeleteCommentArgs) DeepEqual(ano *CommentDeleteCommentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommentDeleteCommentArgs) Field1DeepEqual(src *DeleteCommentReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommentDeleteCommentArgs = map[int16]string{
	1: "req",
}

type CommentDeleteCommentResult struct {
	Success *DeleteCommentResp `thrift:"success,0,optional" frugal:"0,optional,DeleteCommentResp" json:"success,omitempty"`
}

func NewCommentDeleteCommentResult() *CommentDeleteCommentResult {
	return &CommentDeleteCommentResult{}
}

func (p *CommentDeleteCommentResult) InitDefault() {
}

var CommentDeleteCommentResult_Success_DEFAULT *DeleteCommentResp

func (p *CommentDeleteCommentResult) GetSuccess() (v *DeleteCommentResp) {
	if !p.IsSetSuccess() {
		return CommentDeleteCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommentDeleteCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteCommentResp)
}

func (p *CommentDeleteCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentDeleteCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentDeleteCommentResult(%+v)", *p)
}

func (p *CommentDeleteCommentResult) DeepEqual(ano *CommentDeleteCommentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommentDeleteCommentResult) Field0DeepEqual(src *DeleteCommentResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommentDeleteCommentResult = map[int16]string{
	0: "success",
}

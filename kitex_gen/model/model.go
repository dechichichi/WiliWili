// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

type BaseResp struct {
	Code int64  `thrift:"code,1" frugal:"1,default,i64" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) InitDefault() {
}

func (p *BaseResp) GetCode() (v int64) {
	return p.Code
}

func (p *BaseResp) GetMsg() (v string) {
	return p.Msg
}
func (p *BaseResp) SetCode(val int64) {
	p.Code = val
}
func (p *BaseResp) SetMsg(val string) {
	p.Msg = val
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

func (p *BaseResp) DeepEqual(ano *BaseResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *BaseResp) Field1DeepEqual(src int64) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *BaseResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_BaseResp = map[int16]string{
	1: "code",
	2: "msg",
}

type Video struct {
	VideoId       string `thrift:"video_id,1,required" frugal:"1,required,string" json:"video_id"`
	VideoName     string `thrift:"video_name,2,required" frugal:"2,required,string" json:"video_name"`
	VideoUrl      string `thrift:"video_url,3,required" frugal:"3,required,string" json:"video_url"`
	VideoDuration string `thrift:"video_duration,4,required" frugal:"4,required,string" json:"video_duration"`
	LikesCount    int64  `thrift:"likes_count,5,required" frugal:"5,required,i64" json:"likes_count"`
}

func NewVideo() *Video {
	return &Video{}
}

func (p *Video) InitDefault() {
}

func (p *Video) GetVideoId() (v string) {
	return p.VideoId
}

func (p *Video) GetVideoName() (v string) {
	return p.VideoName
}

func (p *Video) GetVideoUrl() (v string) {
	return p.VideoUrl
}

func (p *Video) GetVideoDuration() (v string) {
	return p.VideoDuration
}

func (p *Video) GetLikesCount() (v int64) {
	return p.LikesCount
}
func (p *Video) SetVideoId(val string) {
	p.VideoId = val
}
func (p *Video) SetVideoName(val string) {
	p.VideoName = val
}
func (p *Video) SetVideoUrl(val string) {
	p.VideoUrl = val
}
func (p *Video) SetVideoDuration(val string) {
	p.VideoDuration = val
}
func (p *Video) SetLikesCount(val int64) {
	p.LikesCount = val
}

func (p *Video) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Video(%+v)", *p)
}

func (p *Video) DeepEqual(ano *Video) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoId) {
		return false
	}
	if !p.Field2DeepEqual(ano.VideoName) {
		return false
	}
	if !p.Field3DeepEqual(ano.VideoUrl) {
		return false
	}
	if !p.Field4DeepEqual(ano.VideoDuration) {
		return false
	}
	if !p.Field5DeepEqual(ano.LikesCount) {
		return false
	}
	return true
}

func (p *Video) Field1DeepEqual(src string) bool {

	if strings.Compare(p.VideoId, src) != 0 {
		return false
	}
	return true
}
func (p *Video) Field2DeepEqual(src string) bool {

	if strings.Compare(p.VideoName, src) != 0 {
		return false
	}
	return true
}
func (p *Video) Field3DeepEqual(src string) bool {

	if strings.Compare(p.VideoUrl, src) != 0 {
		return false
	}
	return true
}
func (p *Video) Field4DeepEqual(src string) bool {

	if strings.Compare(p.VideoDuration, src) != 0 {
		return false
	}
	return true
}
func (p *Video) Field5DeepEqual(src int64) bool {

	if p.LikesCount != src {
		return false
	}
	return true
}

var fieldIDToName_Video = map[int16]string{
	1: "video_id",
	2: "video_name",
	3: "video_url",
	4: "video_duration",
	5: "likes_count",
}

type UserInfo struct {
	Username string `thrift:"username,1,required" frugal:"1,required,string" json:"username"`
	Uid      int64  `thrift:"uid,2,required" frugal:"2,required,i64" json:"uid"`
}

func NewUserInfo() *UserInfo {
	return &UserInfo{}
}

func (p *UserInfo) InitDefault() {
}

func (p *UserInfo) GetUsername() (v string) {
	return p.Username
}

func (p *UserInfo) GetUid() (v int64) {
	return p.Uid
}
func (p *UserInfo) SetUsername(val string) {
	p.Username = val
}
func (p *UserInfo) SetUid(val int64) {
	p.Uid = val
}

func (p *UserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfo(%+v)", *p)
}

func (p *UserInfo) DeepEqual(ano *UserInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *UserInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field2DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}

var fieldIDToName_UserInfo = map[int16]string{
	1: "username",
	2: "uid",
}

type UserProfile struct {
	Username  string `thrift:"username,1,required" frugal:"1,required,string" json:"username"`
	Email     string `thrift:"email,2,required" frugal:"2,required,string" json:"email"`
	Gender    string `thrift:"gender,3,required" frugal:"3,required,string" json:"gender"`
	Signature string `thrift:"signature,4,required" frugal:"4,required,string" json:"signature"`
}

func NewUserProfile() *UserProfile {
	return &UserProfile{}
}

func (p *UserProfile) InitDefault() {
}

func (p *UserProfile) GetUsername() (v string) {
	return p.Username
}

func (p *UserProfile) GetEmail() (v string) {
	return p.Email
}

func (p *UserProfile) GetGender() (v string) {
	return p.Gender
}

func (p *UserProfile) GetSignature() (v string) {
	return p.Signature
}
func (p *UserProfile) SetUsername(val string) {
	p.Username = val
}
func (p *UserProfile) SetEmail(val string) {
	p.Email = val
}
func (p *UserProfile) SetGender(val string) {
	p.Gender = val
}
func (p *UserProfile) SetSignature(val string) {
	p.Signature = val
}

func (p *UserProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserProfile(%+v)", *p)
}

func (p *UserProfile) DeepEqual(ano *UserProfile) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Email) {
		return false
	}
	if !p.Field3DeepEqual(ano.Gender) {
		return false
	}
	if !p.Field4DeepEqual(ano.Signature) {
		return false
	}
	return true
}

func (p *UserProfile) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfile) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfile) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Gender, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfile) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Signature, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserProfile = map[int16]string{
	1: "username",
	2: "email",
	3: "gender",
	4: "signature",
}

type Image struct {
	ImageId  int64  `thrift:"image_id,1,required" frugal:"1,required,i64" json:"image_id"`
	ImageUrl string `thrift:"image_url,2,required" frugal:"2,required,string" json:"image_url"`
}

func NewImage() *Image {
	return &Image{}
}

func (p *Image) InitDefault() {
}

func (p *Image) GetImageId() (v int64) {
	return p.ImageId
}

func (p *Image) GetImageUrl() (v string) {
	return p.ImageUrl
}
func (p *Image) SetImageId(val int64) {
	p.ImageId = val
}
func (p *Image) SetImageUrl(val string) {
	p.ImageUrl = val
}

func (p *Image) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Image(%+v)", *p)
}

func (p *Image) DeepEqual(ano *Image) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ImageId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ImageUrl) {
		return false
	}
	return true
}

func (p *Image) Field1DeepEqual(src int64) bool {

	if p.ImageId != src {
		return false
	}
	return true
}
func (p *Image) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ImageUrl, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_Image = map[int16]string{
	1: "image_id",
	2: "image_url",
}

type Comment struct {
	CommentId  string `thrift:"comment_id,1,required" frugal:"1,required,string" json:"comment_id"`
	UserId     string `thrift:"user_id,2,required" frugal:"2,required,string" json:"user_id"`
	Content    string `thrift:"content,3,required" frugal:"3,required,string" json:"content"`
	CreateTime int64  `thrift:"create_time,4,required" frugal:"4,required,i64" json:"create_time"`
}

func NewComment() *Comment {
	return &Comment{}
}

func (p *Comment) InitDefault() {
}

func (p *Comment) GetCommentId() (v string) {
	return p.CommentId
}

func (p *Comment) GetUserId() (v string) {
	return p.UserId
}

func (p *Comment) GetContent() (v string) {
	return p.Content
}

func (p *Comment) GetCreateTime() (v int64) {
	return p.CreateTime
}
func (p *Comment) SetCommentId(val string) {
	p.CommentId = val
}
func (p *Comment) SetUserId(val string) {
	p.UserId = val
}
func (p *Comment) SetContent(val string) {
	p.Content = val
}
func (p *Comment) SetCreateTime(val int64) {
	p.CreateTime = val
}

func (p *Comment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Comment(%+v)", *p)
}

func (p *Comment) DeepEqual(ano *Comment) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CommentId) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Content) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreateTime) {
		return false
	}
	return true
}

func (p *Comment) Field1DeepEqual(src string) bool {

	if strings.Compare(p.CommentId, src) != 0 {
		return false
	}
	return true
}
func (p *Comment) Field2DeepEqual(src string) bool {

	if strings.Compare(p.UserId, src) != 0 {
		return false
	}
	return true
}
func (p *Comment) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}
func (p *Comment) Field4DeepEqual(src int64) bool {

	if p.CreateTime != src {
		return false
	}
	return true
}

var fieldIDToName_Comment = map[int16]string{
	1: "comment_id",
	2: "user_id",
	3: "content",
	4: "create_time",
}

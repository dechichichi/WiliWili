// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package user

import (
	"bytes"
	"context"
	"fmt"
	"strings"
)

type UserRegisterReq struct {
	Username  string `thrift:"username,1,required" frugal:"1,required,string" json:"username"`
	Password  string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
	Email     string `thrift:"email,3,required" frugal:"3,required,string" json:"email"`
	Phone     string `thrift:"phone,4,required" frugal:"4,required,string" json:"phone"`
	Nickname  string `thrift:"nickname,5,required" frugal:"5,required,string" json:"nickname"`
	Gender    string `thrift:"gender,6,required" frugal:"6,required,string" json:"gender"`
	Birthday  string `thrift:"birthday,7,required" frugal:"7,required,string" json:"birthday"`
	Signature string `thrift:"signature,8,required" frugal:"8,required,string" json:"signature"`
}

func NewUserRegisterReq() *UserRegisterReq {
	return &UserRegisterReq{}
}

func (p *UserRegisterReq) InitDefault() {
}

func (p *UserRegisterReq) GetUsername() (v string) {
	return p.Username
}

func (p *UserRegisterReq) GetPassword() (v string) {
	return p.Password
}

func (p *UserRegisterReq) GetEmail() (v string) {
	return p.Email
}

func (p *UserRegisterReq) GetPhone() (v string) {
	return p.Phone
}

func (p *UserRegisterReq) GetNickname() (v string) {
	return p.Nickname
}

func (p *UserRegisterReq) GetGender() (v string) {
	return p.Gender
}

func (p *UserRegisterReq) GetBirthday() (v string) {
	return p.Birthday
}

func (p *UserRegisterReq) GetSignature() (v string) {
	return p.Signature
}
func (p *UserRegisterReq) SetUsername(val string) {
	p.Username = val
}
func (p *UserRegisterReq) SetPassword(val string) {
	p.Password = val
}
func (p *UserRegisterReq) SetEmail(val string) {
	p.Email = val
}
func (p *UserRegisterReq) SetPhone(val string) {
	p.Phone = val
}
func (p *UserRegisterReq) SetNickname(val string) {
	p.Nickname = val
}
func (p *UserRegisterReq) SetGender(val string) {
	p.Gender = val
}
func (p *UserRegisterReq) SetBirthday(val string) {
	p.Birthday = val
}
func (p *UserRegisterReq) SetSignature(val string) {
	p.Signature = val
}

func (p *UserRegisterReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserRegisterReq(%+v)", *p)
}

func (p *UserRegisterReq) DeepEqual(ano *UserRegisterReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	if !p.Field3DeepEqual(ano.Email) {
		return false
	}
	if !p.Field4DeepEqual(ano.Phone) {
		return false
	}
	if !p.Field5DeepEqual(ano.Nickname) {
		return false
	}
	if !p.Field6DeepEqual(ano.Gender) {
		return false
	}
	if !p.Field7DeepEqual(ano.Birthday) {
		return false
	}
	if !p.Field8DeepEqual(ano.Signature) {
		return false
	}
	return true
}

func (p *UserRegisterReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *UserRegisterReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}
func (p *UserRegisterReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *UserRegisterReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Phone, src) != 0 {
		return false
	}
	return true
}
func (p *UserRegisterReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Nickname, src) != 0 {
		return false
	}
	return true
}
func (p *UserRegisterReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Gender, src) != 0 {
		return false
	}
	return true
}
func (p *UserRegisterReq) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Birthday, src) != 0 {
		return false
	}
	return true
}
func (p *UserRegisterReq) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Signature, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserRegisterReq = map[int16]string{
	1: "username",
	2: "password",
	3: "email",
	4: "phone",
	5: "nickname",
	6: "gender",
	7: "birthday",
	8: "signature",
}

type UserRegisterResp struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewUserRegisterResp() *UserRegisterResp {
	return &UserRegisterResp{}
}

func (p *UserRegisterResp) InitDefault() {
}

func (p *UserRegisterResp) GetToken() (v string) {
	return p.Token
}
func (p *UserRegisterResp) SetToken(val string) {
	p.Token = val
}

func (p *UserRegisterResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserRegisterResp(%+v)", *p)
}

func (p *UserRegisterResp) DeepEqual(ano *UserRegisterResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *UserRegisterResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserRegisterResp = map[int16]string{
	1: "token",
}

type UserLoginReq struct {
	Username string `thrift:"username,1,required" frugal:"1,required,string" json:"username"`
	Password string `thrift:"password,2,required" frugal:"2,required,string" json:"password"`
}

func NewUserLoginReq() *UserLoginReq {
	return &UserLoginReq{}
}

func (p *UserLoginReq) InitDefault() {
}

func (p *UserLoginReq) GetUsername() (v string) {
	return p.Username
}

func (p *UserLoginReq) GetPassword() (v string) {
	return p.Password
}
func (p *UserLoginReq) SetUsername(val string) {
	p.Username = val
}
func (p *UserLoginReq) SetPassword(val string) {
	p.Password = val
}

func (p *UserLoginReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserLoginReq(%+v)", *p)
}

func (p *UserLoginReq) DeepEqual(ano *UserLoginReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Password) {
		return false
	}
	return true
}

func (p *UserLoginReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *UserLoginReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserLoginReq = map[int16]string{
	1: "username",
	2: "password",
}

type UserLoginResp struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewUserLoginResp() *UserLoginResp {
	return &UserLoginResp{}
}

func (p *UserLoginResp) InitDefault() {
}

func (p *UserLoginResp) GetToken() (v string) {
	return p.Token
}
func (p *UserLoginResp) SetToken(val string) {
	p.Token = val
}

func (p *UserLoginResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserLoginResp(%+v)", *p)
}

func (p *UserLoginResp) DeepEqual(ano *UserLoginResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *UserLoginResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserLoginResp = map[int16]string{
	1: "token",
}

type UserProfileReq struct {
	Token string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
}

func NewUserProfileReq() *UserProfileReq {
	return &UserProfileReq{}
}

func (p *UserProfileReq) InitDefault() {
}

func (p *UserProfileReq) GetToken() (v string) {
	return p.Token
}
func (p *UserProfileReq) SetToken(val string) {
	p.Token = val
}

func (p *UserProfileReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserProfileReq(%+v)", *p)
}

func (p *UserProfileReq) DeepEqual(ano *UserProfileReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *UserProfileReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserProfileReq = map[int16]string{
	1: "token",
}

type UserProfileResp struct {
	Username  string `thrift:"username,1,required" frugal:"1,required,string" json:"username"`
	Email     string `thrift:"email,2,required" frugal:"2,required,string" json:"email"`
	Phone     string `thrift:"phone,3,required" frugal:"3,required,string" json:"phone"`
	Nickname  string `thrift:"nickname,4,required" frugal:"4,required,string" json:"nickname"`
	Gender    string `thrift:"gender,5,required" frugal:"5,required,string" json:"gender"`
	Birthday  string `thrift:"birthday,6,required" frugal:"6,required,string" json:"birthday"`
	Signature string `thrift:"signature,7,required" frugal:"7,required,string" json:"signature"`
}

func NewUserProfileResp() *UserProfileResp {
	return &UserProfileResp{}
}

func (p *UserProfileResp) InitDefault() {
}

func (p *UserProfileResp) GetUsername() (v string) {
	return p.Username
}

func (p *UserProfileResp) GetEmail() (v string) {
	return p.Email
}

func (p *UserProfileResp) GetPhone() (v string) {
	return p.Phone
}

func (p *UserProfileResp) GetNickname() (v string) {
	return p.Nickname
}

func (p *UserProfileResp) GetGender() (v string) {
	return p.Gender
}

func (p *UserProfileResp) GetBirthday() (v string) {
	return p.Birthday
}

func (p *UserProfileResp) GetSignature() (v string) {
	return p.Signature
}
func (p *UserProfileResp) SetUsername(val string) {
	p.Username = val
}
func (p *UserProfileResp) SetEmail(val string) {
	p.Email = val
}
func (p *UserProfileResp) SetPhone(val string) {
	p.Phone = val
}
func (p *UserProfileResp) SetNickname(val string) {
	p.Nickname = val
}
func (p *UserProfileResp) SetGender(val string) {
	p.Gender = val
}
func (p *UserProfileResp) SetBirthday(val string) {
	p.Birthday = val
}
func (p *UserProfileResp) SetSignature(val string) {
	p.Signature = val
}

func (p *UserProfileResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserProfileResp(%+v)", *p)
}

func (p *UserProfileResp) DeepEqual(ano *UserProfileResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Username) {
		return false
	}
	if !p.Field2DeepEqual(ano.Email) {
		return false
	}
	if !p.Field3DeepEqual(ano.Phone) {
		return false
	}
	if !p.Field4DeepEqual(ano.Nickname) {
		return false
	}
	if !p.Field5DeepEqual(ano.Gender) {
		return false
	}
	if !p.Field6DeepEqual(ano.Birthday) {
		return false
	}
	if !p.Field7DeepEqual(ano.Signature) {
		return false
	}
	return true
}

func (p *UserProfileResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfileResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfileResp) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Phone, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfileResp) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Nickname, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfileResp) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Gender, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfileResp) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Birthday, src) != 0 {
		return false
	}
	return true
}
func (p *UserProfileResp) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Signature, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserProfileResp = map[int16]string{
	1: "username",
	2: "email",
	3: "phone",
	4: "nickname",
	5: "gender",
	6: "birthday",
	7: "signature",
}

type UserAvatarUploadReq struct {
	Token  string `thrift:"token,1,required" frugal:"1,required,string" json:"token"`
	Avatar []byte `thrift:"avatar,2,required" frugal:"2,required,binary" json:"avatar"`
}

func NewUserAvatarUploadReq() *UserAvatarUploadReq {
	return &UserAvatarUploadReq{}
}

func (p *UserAvatarUploadReq) InitDefault() {
}

func (p *UserAvatarUploadReq) GetToken() (v string) {
	return p.Token
}

func (p *UserAvatarUploadReq) GetAvatar() (v []byte) {
	return p.Avatar
}
func (p *UserAvatarUploadReq) SetToken(val string) {
	p.Token = val
}
func (p *UserAvatarUploadReq) SetAvatar(val []byte) {
	p.Avatar = val
}

func (p *UserAvatarUploadReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAvatarUploadReq(%+v)", *p)
}

func (p *UserAvatarUploadReq) DeepEqual(ano *UserAvatarUploadReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Token) {
		return false
	}
	if !p.Field2DeepEqual(ano.Avatar) {
		return false
	}
	return true
}

func (p *UserAvatarUploadReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Token, src) != 0 {
		return false
	}
	return true
}
func (p *UserAvatarUploadReq) Field2DeepEqual(src []byte) bool {

	if bytes.Compare(p.Avatar, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserAvatarUploadReq = map[int16]string{
	1: "token",
	2: "avatar",
}

type UserAvatarUploadResp struct {
	Url string `thrift:"url,1,required" frugal:"1,required,string" json:"url"`
}

func NewUserAvatarUploadResp() *UserAvatarUploadResp {
	return &UserAvatarUploadResp{}
}

func (p *UserAvatarUploadResp) InitDefault() {
}

func (p *UserAvatarUploadResp) GetUrl() (v string) {
	return p.Url
}
func (p *UserAvatarUploadResp) SetUrl(val string) {
	p.Url = val
}

func (p *UserAvatarUploadResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAvatarUploadResp(%+v)", *p)
}

func (p *UserAvatarUploadResp) DeepEqual(ano *UserAvatarUploadResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Url) {
		return false
	}
	return true
}

func (p *UserAvatarUploadResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserAvatarUploadResp = map[int16]string{
	1: "url",
}

type UserService interface {
	UserRegister(ctx context.Context, req *UserRegisterReq) (r *UserRegisterResp, err error)

	UserLogin(ctx context.Context, req *UserLoginReq) (r *UserLoginResp, err error)

	UserProfile(ctx context.Context, req *UserProfileReq) (r *UserProfileResp, err error)

	UserAvatarUpload(ctx context.Context, req *UserAvatarUploadReq) (r *UserAvatarUploadResp, err error)
}

type UserServiceUserRegisterArgs struct {
	Req *UserRegisterReq `thrift:"req,1" frugal:"1,default,UserRegisterReq" json:"req"`
}

func NewUserServiceUserRegisterArgs() *UserServiceUserRegisterArgs {
	return &UserServiceUserRegisterArgs{}
}

func (p *UserServiceUserRegisterArgs) InitDefault() {
}

var UserServiceUserRegisterArgs_Req_DEFAULT *UserRegisterReq

func (p *UserServiceUserRegisterArgs) GetReq() (v *UserRegisterReq) {
	if !p.IsSetReq() {
		return UserServiceUserRegisterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUserRegisterArgs) SetReq(val *UserRegisterReq) {
	p.Req = val
}

func (p *UserServiceUserRegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUserRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserRegisterArgs(%+v)", *p)
}

func (p *UserServiceUserRegisterArgs) DeepEqual(ano *UserServiceUserRegisterArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceUserRegisterArgs) Field1DeepEqual(src *UserRegisterReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceUserRegisterArgs = map[int16]string{
	1: "req",
}

type UserServiceUserRegisterResult struct {
	Success *UserRegisterResp `thrift:"success,0,optional" frugal:"0,optional,UserRegisterResp" json:"success,omitempty"`
}

func NewUserServiceUserRegisterResult() *UserServiceUserRegisterResult {
	return &UserServiceUserRegisterResult{}
}

func (p *UserServiceUserRegisterResult) InitDefault() {
}

var UserServiceUserRegisterResult_Success_DEFAULT *UserRegisterResp

func (p *UserServiceUserRegisterResult) GetSuccess() (v *UserRegisterResp) {
	if !p.IsSetSuccess() {
		return UserServiceUserRegisterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUserRegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserRegisterResp)
}

func (p *UserServiceUserRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUserRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserRegisterResult(%+v)", *p)
}

func (p *UserServiceUserRegisterResult) DeepEqual(ano *UserServiceUserRegisterResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceUserRegisterResult) Field0DeepEqual(src *UserRegisterResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceUserRegisterResult = map[int16]string{
	0: "success",
}

type UserServiceUserLoginArgs struct {
	Req *UserLoginReq `thrift:"req,1" frugal:"1,default,UserLoginReq" json:"req"`
}

func NewUserServiceUserLoginArgs() *UserServiceUserLoginArgs {
	return &UserServiceUserLoginArgs{}
}

func (p *UserServiceUserLoginArgs) InitDefault() {
}

var UserServiceUserLoginArgs_Req_DEFAULT *UserLoginReq

func (p *UserServiceUserLoginArgs) GetReq() (v *UserLoginReq) {
	if !p.IsSetReq() {
		return UserServiceUserLoginArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUserLoginArgs) SetReq(val *UserLoginReq) {
	p.Req = val
}

func (p *UserServiceUserLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUserLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserLoginArgs(%+v)", *p)
}

func (p *UserServiceUserLoginArgs) DeepEqual(ano *UserServiceUserLoginArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceUserLoginArgs) Field1DeepEqual(src *UserLoginReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceUserLoginArgs = map[int16]string{
	1: "req",
}

type UserServiceUserLoginResult struct {
	Success *UserLoginResp `thrift:"success,0,optional" frugal:"0,optional,UserLoginResp" json:"success,omitempty"`
}

func NewUserServiceUserLoginResult() *UserServiceUserLoginResult {
	return &UserServiceUserLoginResult{}
}

func (p *UserServiceUserLoginResult) InitDefault() {
}

var UserServiceUserLoginResult_Success_DEFAULT *UserLoginResp

func (p *UserServiceUserLoginResult) GetSuccess() (v *UserLoginResp) {
	if !p.IsSetSuccess() {
		return UserServiceUserLoginResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUserLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserLoginResp)
}

func (p *UserServiceUserLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUserLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserLoginResult(%+v)", *p)
}

func (p *UserServiceUserLoginResult) DeepEqual(ano *UserServiceUserLoginResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceUserLoginResult) Field0DeepEqual(src *UserLoginResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceUserLoginResult = map[int16]string{
	0: "success",
}

type UserServiceUserProfileArgs struct {
	Req *UserProfileReq `thrift:"req,1" frugal:"1,default,UserProfileReq" json:"req"`
}

func NewUserServiceUserProfileArgs() *UserServiceUserProfileArgs {
	return &UserServiceUserProfileArgs{}
}

func (p *UserServiceUserProfileArgs) InitDefault() {
}

var UserServiceUserProfileArgs_Req_DEFAULT *UserProfileReq

func (p *UserServiceUserProfileArgs) GetReq() (v *UserProfileReq) {
	if !p.IsSetReq() {
		return UserServiceUserProfileArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUserProfileArgs) SetReq(val *UserProfileReq) {
	p.Req = val
}

func (p *UserServiceUserProfileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUserProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserProfileArgs(%+v)", *p)
}

func (p *UserServiceUserProfileArgs) DeepEqual(ano *UserServiceUserProfileArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceUserProfileArgs) Field1DeepEqual(src *UserProfileReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceUserProfileArgs = map[int16]string{
	1: "req",
}

type UserServiceUserProfileResult struct {
	Success *UserProfileResp `thrift:"success,0,optional" frugal:"0,optional,UserProfileResp" json:"success,omitempty"`
}

func NewUserServiceUserProfileResult() *UserServiceUserProfileResult {
	return &UserServiceUserProfileResult{}
}

func (p *UserServiceUserProfileResult) InitDefault() {
}

var UserServiceUserProfileResult_Success_DEFAULT *UserProfileResp

func (p *UserServiceUserProfileResult) GetSuccess() (v *UserProfileResp) {
	if !p.IsSetSuccess() {
		return UserServiceUserProfileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUserProfileResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserProfileResp)
}

func (p *UserServiceUserProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUserProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserProfileResult(%+v)", *p)
}

func (p *UserServiceUserProfileResult) DeepEqual(ano *UserServiceUserProfileResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceUserProfileResult) Field0DeepEqual(src *UserProfileResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceUserProfileResult = map[int16]string{
	0: "success",
}

type UserServiceUserAvatarUploadArgs struct {
	Req *UserAvatarUploadReq `thrift:"req,1" frugal:"1,default,UserAvatarUploadReq" json:"req"`
}

func NewUserServiceUserAvatarUploadArgs() *UserServiceUserAvatarUploadArgs {
	return &UserServiceUserAvatarUploadArgs{}
}

func (p *UserServiceUserAvatarUploadArgs) InitDefault() {
}

var UserServiceUserAvatarUploadArgs_Req_DEFAULT *UserAvatarUploadReq

func (p *UserServiceUserAvatarUploadArgs) GetReq() (v *UserAvatarUploadReq) {
	if !p.IsSetReq() {
		return UserServiceUserAvatarUploadArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceUserAvatarUploadArgs) SetReq(val *UserAvatarUploadReq) {
	p.Req = val
}

func (p *UserServiceUserAvatarUploadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceUserAvatarUploadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserAvatarUploadArgs(%+v)", *p)
}

func (p *UserServiceUserAvatarUploadArgs) DeepEqual(ano *UserServiceUserAvatarUploadArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *UserServiceUserAvatarUploadArgs) Field1DeepEqual(src *UserAvatarUploadReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceUserAvatarUploadArgs = map[int16]string{
	1: "req",
}

type UserServiceUserAvatarUploadResult struct {
	Success *UserAvatarUploadResp `thrift:"success,0,optional" frugal:"0,optional,UserAvatarUploadResp" json:"success,omitempty"`
}

func NewUserServiceUserAvatarUploadResult() *UserServiceUserAvatarUploadResult {
	return &UserServiceUserAvatarUploadResult{}
}

func (p *UserServiceUserAvatarUploadResult) InitDefault() {
}

var UserServiceUserAvatarUploadResult_Success_DEFAULT *UserAvatarUploadResp

func (p *UserServiceUserAvatarUploadResult) GetSuccess() (v *UserAvatarUploadResp) {
	if !p.IsSetSuccess() {
		return UserServiceUserAvatarUploadResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserServiceUserAvatarUploadResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserAvatarUploadResp)
}

func (p *UserServiceUserAvatarUploadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceUserAvatarUploadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceUserAvatarUploadResult(%+v)", *p)
}

func (p *UserServiceUserAvatarUploadResult) DeepEqual(ano *UserServiceUserAvatarUploadResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *UserServiceUserAvatarUploadResult) Field0DeepEqual(src *UserAvatarUploadResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UserServiceUserAvatarUploadResult = map[int16]string{
	0: "success",
}

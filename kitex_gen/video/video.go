// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package video

import (
	"context"
	"fmt"
	"strings"
)

type VideoSubmissionReq struct {
	Userid        string `thrift:"userid,1,required" frugal:"1,required,string" json:"userid"`
	VideoId       string `thrift:"video_id,2,required" frugal:"2,required,string" json:"video_id"`
	VideoName     string `thrift:"video_name,3,required" frugal:"3,required,string" json:"video_name"`
	VideoUrl      string `thrift:"video_url,4,required" frugal:"4,required,string" json:"video_url"`
	VideoCoverUrl string `thrift:"video_cover_url,5,required" frugal:"5,required,string" json:"video_cover_url"`
	VideoDesc     string `thrift:"video_desc,6,required" frugal:"6,required,string" json:"video_desc"`
	VideoTags     string `thrift:"video_tags,7,required" frugal:"7,required,string" json:"video_tags"`
	VideoDuration int32  `thrift:"video_duration,8,required" frugal:"8,required,i32" json:"video_duration"`
	VideoSize     int32  `thrift:"video_size,9,required" frugal:"9,required,i32" json:"video_size"`
}

func NewVideoSubmissionReq() *VideoSubmissionReq {
	return &VideoSubmissionReq{}
}

func (p *VideoSubmissionReq) InitDefault() {
}

func (p *VideoSubmissionReq) GetUserid() (v string) {
	return p.Userid
}

func (p *VideoSubmissionReq) GetVideoId() (v string) {
	return p.VideoId
}

func (p *VideoSubmissionReq) GetVideoName() (v string) {
	return p.VideoName
}

func (p *VideoSubmissionReq) GetVideoUrl() (v string) {
	return p.VideoUrl
}

func (p *VideoSubmissionReq) GetVideoCoverUrl() (v string) {
	return p.VideoCoverUrl
}

func (p *VideoSubmissionReq) GetVideoDesc() (v string) {
	return p.VideoDesc
}

func (p *VideoSubmissionReq) GetVideoTags() (v string) {
	return p.VideoTags
}

func (p *VideoSubmissionReq) GetVideoDuration() (v int32) {
	return p.VideoDuration
}

func (p *VideoSubmissionReq) GetVideoSize() (v int32) {
	return p.VideoSize
}
func (p *VideoSubmissionReq) SetUserid(val string) {
	p.Userid = val
}
func (p *VideoSubmissionReq) SetVideoId(val string) {
	p.VideoId = val
}
func (p *VideoSubmissionReq) SetVideoName(val string) {
	p.VideoName = val
}
func (p *VideoSubmissionReq) SetVideoUrl(val string) {
	p.VideoUrl = val
}
func (p *VideoSubmissionReq) SetVideoCoverUrl(val string) {
	p.VideoCoverUrl = val
}
func (p *VideoSubmissionReq) SetVideoDesc(val string) {
	p.VideoDesc = val
}
func (p *VideoSubmissionReq) SetVideoTags(val string) {
	p.VideoTags = val
}
func (p *VideoSubmissionReq) SetVideoDuration(val int32) {
	p.VideoDuration = val
}
func (p *VideoSubmissionReq) SetVideoSize(val int32) {
	p.VideoSize = val
}

func (p *VideoSubmissionReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSubmissionReq(%+v)", *p)
}

func (p *VideoSubmissionReq) DeepEqual(ano *VideoSubmissionReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Userid) {
		return false
	}
	if !p.Field2DeepEqual(ano.VideoId) {
		return false
	}
	if !p.Field3DeepEqual(ano.VideoName) {
		return false
	}
	if !p.Field4DeepEqual(ano.VideoUrl) {
		return false
	}
	if !p.Field5DeepEqual(ano.VideoCoverUrl) {
		return false
	}
	if !p.Field6DeepEqual(ano.VideoDesc) {
		return false
	}
	if !p.Field7DeepEqual(ano.VideoTags) {
		return false
	}
	if !p.Field8DeepEqual(ano.VideoDuration) {
		return false
	}
	if !p.Field9DeepEqual(ano.VideoSize) {
		return false
	}
	return true
}

func (p *VideoSubmissionReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Userid, src) != 0 {
		return false
	}
	return true
}
func (p *VideoSubmissionReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.VideoId, src) != 0 {
		return false
	}
	return true
}
func (p *VideoSubmissionReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.VideoName, src) != 0 {
		return false
	}
	return true
}
func (p *VideoSubmissionReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.VideoUrl, src) != 0 {
		return false
	}
	return true
}
func (p *VideoSubmissionReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.VideoCoverUrl, src) != 0 {
		return false
	}
	return true
}
func (p *VideoSubmissionReq) Field6DeepEqual(src string) bool {

	if strings.Compare(p.VideoDesc, src) != 0 {
		return false
	}
	return true
}
func (p *VideoSubmissionReq) Field7DeepEqual(src string) bool {

	if strings.Compare(p.VideoTags, src) != 0 {
		return false
	}
	return true
}
func (p *VideoSubmissionReq) Field8DeepEqual(src int32) bool {

	if p.VideoDuration != src {
		return false
	}
	return true
}
func (p *VideoSubmissionReq) Field9DeepEqual(src int32) bool {

	if p.VideoSize != src {
		return false
	}
	return true
}

var fieldIDToName_VideoSubmissionReq = map[int16]string{
	1: "userid",
	2: "video_id",
	3: "video_name",
	4: "video_url",
	5: "video_cover_url",
	6: "video_desc",
	7: "video_tags",
	8: "video_duration",
	9: "video_size",
}

type VideoSubmissionResp struct {
	Success bool    `thrift:"success,1,required" frugal:"1,required,bool" json:"success"`
	Error   *string `thrift:"error,2,optional" frugal:"2,optional,string" json:"error,omitempty"`
}

func NewVideoSubmissionResp() *VideoSubmissionResp {
	return &VideoSubmissionResp{}
}

func (p *VideoSubmissionResp) InitDefault() {
}

func (p *VideoSubmissionResp) GetSuccess() (v bool) {
	return p.Success
}

var VideoSubmissionResp_Error_DEFAULT string

func (p *VideoSubmissionResp) GetError() (v string) {
	if !p.IsSetError() {
		return VideoSubmissionResp_Error_DEFAULT
	}
	return *p.Error
}
func (p *VideoSubmissionResp) SetSuccess(val bool) {
	p.Success = val
}
func (p *VideoSubmissionResp) SetError(val *string) {
	p.Error = val
}

func (p *VideoSubmissionResp) IsSetError() bool {
	return p.Error != nil
}

func (p *VideoSubmissionResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSubmissionResp(%+v)", *p)
}

func (p *VideoSubmissionResp) DeepEqual(ano *VideoSubmissionResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Success) {
		return false
	}
	if !p.Field2DeepEqual(ano.Error) {
		return false
	}
	return true
}

func (p *VideoSubmissionResp) Field1DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}
func (p *VideoSubmissionResp) Field2DeepEqual(src *string) bool {

	if p.Error == src {
		return true
	} else if p.Error == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Error, *src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_VideoSubmissionResp = map[int16]string{
	1: "success",
	2: "error",
}

type VideoListReq struct {
	Userid   string `thrift:"userid,1,required" frugal:"1,required,string" json:"userid"`
	PageNum  int32  `thrift:"page_num,2,required" frugal:"2,required,i32" json:"page_num"`
	PageSize int32  `thrift:"page_size,3,required" frugal:"3,required,i32" json:"page_size"`
}

func NewVideoListReq() *VideoListReq {
	return &VideoListReq{}
}

func (p *VideoListReq) InitDefault() {
}

func (p *VideoListReq) GetUserid() (v string) {
	return p.Userid
}

func (p *VideoListReq) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *VideoListReq) GetPageSize() (v int32) {
	return p.PageSize
}
func (p *VideoListReq) SetUserid(val string) {
	p.Userid = val
}
func (p *VideoListReq) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *VideoListReq) SetPageSize(val int32) {
	p.PageSize = val
}

func (p *VideoListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoListReq(%+v)", *p)
}

func (p *VideoListReq) DeepEqual(ano *VideoListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Userid) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *VideoListReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Userid, src) != 0 {
		return false
	}
	return true
}
func (p *VideoListReq) Field2DeepEqual(src int32) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *VideoListReq) Field3DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

var fieldIDToName_VideoListReq = map[int16]string{
	1: "userid",
	2: "page_num",
	3: "page_size",
}

type VideoListResp struct {
	VideoIds       []string `thrift:"video_ids,1,required" frugal:"1,required,list<string>" json:"video_ids"`
	VideoNames     []string `thrift:"video_names,2,required" frugal:"2,required,list<string>" json:"video_names"`
	VideoUrls      []string `thrift:"video_urls,3,required" frugal:"3,required,list<string>" json:"video_urls"`
	VideoCoverUrls []string `thrift:"video_cover_urls,4,required" frugal:"4,required,list<string>" json:"video_cover_urls"`
	VideoDescs     []string `thrift:"video_descs,5,required" frugal:"5,required,list<string>" json:"video_descs"`
	VideoTags      []string `thrift:"video_tags,6,required" frugal:"6,required,list<string>" json:"video_tags"`
}

func NewVideoListResp() *VideoListResp {
	return &VideoListResp{}
}

func (p *VideoListResp) InitDefault() {
}

func (p *VideoListResp) GetVideoIds() (v []string) {
	return p.VideoIds
}

func (p *VideoListResp) GetVideoNames() (v []string) {
	return p.VideoNames
}

func (p *VideoListResp) GetVideoUrls() (v []string) {
	return p.VideoUrls
}

func (p *VideoListResp) GetVideoCoverUrls() (v []string) {
	return p.VideoCoverUrls
}

func (p *VideoListResp) GetVideoDescs() (v []string) {
	return p.VideoDescs
}

func (p *VideoListResp) GetVideoTags() (v []string) {
	return p.VideoTags
}
func (p *VideoListResp) SetVideoIds(val []string) {
	p.VideoIds = val
}
func (p *VideoListResp) SetVideoNames(val []string) {
	p.VideoNames = val
}
func (p *VideoListResp) SetVideoUrls(val []string) {
	p.VideoUrls = val
}
func (p *VideoListResp) SetVideoCoverUrls(val []string) {
	p.VideoCoverUrls = val
}
func (p *VideoListResp) SetVideoDescs(val []string) {
	p.VideoDescs = val
}
func (p *VideoListResp) SetVideoTags(val []string) {
	p.VideoTags = val
}

func (p *VideoListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoListResp(%+v)", *p)
}

func (p *VideoListResp) DeepEqual(ano *VideoListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoIds) {
		return false
	}
	if !p.Field2DeepEqual(ano.VideoNames) {
		return false
	}
	if !p.Field3DeepEqual(ano.VideoUrls) {
		return false
	}
	if !p.Field4DeepEqual(ano.VideoCoverUrls) {
		return false
	}
	if !p.Field5DeepEqual(ano.VideoDescs) {
		return false
	}
	if !p.Field6DeepEqual(ano.VideoTags) {
		return false
	}
	return true
}

func (p *VideoListResp) Field1DeepEqual(src []string) bool {

	if len(p.VideoIds) != len(src) {
		return false
	}
	for i, v := range p.VideoIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *VideoListResp) Field2DeepEqual(src []string) bool {

	if len(p.VideoNames) != len(src) {
		return false
	}
	for i, v := range p.VideoNames {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *VideoListResp) Field3DeepEqual(src []string) bool {

	if len(p.VideoUrls) != len(src) {
		return false
	}
	for i, v := range p.VideoUrls {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *VideoListResp) Field4DeepEqual(src []string) bool {

	if len(p.VideoCoverUrls) != len(src) {
		return false
	}
	for i, v := range p.VideoCoverUrls {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *VideoListResp) Field5DeepEqual(src []string) bool {

	if len(p.VideoDescs) != len(src) {
		return false
	}
	for i, v := range p.VideoDescs {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *VideoListResp) Field6DeepEqual(src []string) bool {

	if len(p.VideoTags) != len(src) {
		return false
	}
	for i, v := range p.VideoTags {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

var fieldIDToName_VideoListResp = map[int16]string{
	1: "video_ids",
	2: "video_names",
	3: "video_urls",
	4: "video_cover_urls",
	5: "video_descs",
	6: "video_tags",
}

type VideoSearchReq struct {
	Keyword  string `thrift:"keyword,1,required" frugal:"1,required,string" json:"keyword"`
	PageNum  int32  `thrift:"page_num,2,required" frugal:"2,required,i32" json:"page_num"`
	PageSize int32  `thrift:"page_size,3,required" frugal:"3,required,i32" json:"page_size"`
}

func NewVideoSearchReq() *VideoSearchReq {
	return &VideoSearchReq{}
}

func (p *VideoSearchReq) InitDefault() {
}

func (p *VideoSearchReq) GetKeyword() (v string) {
	return p.Keyword
}

func (p *VideoSearchReq) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *VideoSearchReq) GetPageSize() (v int32) {
	return p.PageSize
}
func (p *VideoSearchReq) SetKeyword(val string) {
	p.Keyword = val
}
func (p *VideoSearchReq) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *VideoSearchReq) SetPageSize(val int32) {
	p.PageSize = val
}

func (p *VideoSearchReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSearchReq(%+v)", *p)
}

func (p *VideoSearchReq) DeepEqual(ano *VideoSearchReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Keyword) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *VideoSearchReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Keyword, src) != 0 {
		return false
	}
	return true
}
func (p *VideoSearchReq) Field2DeepEqual(src int32) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *VideoSearchReq) Field3DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

var fieldIDToName_VideoSearchReq = map[int16]string{
	1: "keyword",
	2: "page_num",
	3: "page_size",
}

type VideoSearchResp struct {
	VideoIds   []string `thrift:"video_ids,1,required" frugal:"1,required,list<string>" json:"video_ids"`
	VideoNames []string `thrift:"video_names,2,required" frugal:"2,required,list<string>" json:"video_names"`
}

func NewVideoSearchResp() *VideoSearchResp {
	return &VideoSearchResp{}
}

func (p *VideoSearchResp) InitDefault() {
}

func (p *VideoSearchResp) GetVideoIds() (v []string) {
	return p.VideoIds
}

func (p *VideoSearchResp) GetVideoNames() (v []string) {
	return p.VideoNames
}
func (p *VideoSearchResp) SetVideoIds(val []string) {
	p.VideoIds = val
}
func (p *VideoSearchResp) SetVideoNames(val []string) {
	p.VideoNames = val
}

func (p *VideoSearchResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSearchResp(%+v)", *p)
}

func (p *VideoSearchResp) DeepEqual(ano *VideoSearchResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoIds) {
		return false
	}
	if !p.Field2DeepEqual(ano.VideoNames) {
		return false
	}
	return true
}

func (p *VideoSearchResp) Field1DeepEqual(src []string) bool {

	if len(p.VideoIds) != len(src) {
		return false
	}
	for i, v := range p.VideoIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *VideoSearchResp) Field2DeepEqual(src []string) bool {

	if len(p.VideoNames) != len(src) {
		return false
	}
	for i, v := range p.VideoNames {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

var fieldIDToName_VideoSearchResp = map[int16]string{
	1: "video_ids",
	2: "video_names",
}

type VideoTrendingLearderBoardReq struct {
	PageNum  int32 `thrift:"page_num,1,required" frugal:"1,required,i32" json:"page_num"`
	PageSize int32 `thrift:"page_size,2,required" frugal:"2,required,i32" json:"page_size"`
}

func NewVideoTrendingLearderBoardReq() *VideoTrendingLearderBoardReq {
	return &VideoTrendingLearderBoardReq{}
}

func (p *VideoTrendingLearderBoardReq) InitDefault() {
}

func (p *VideoTrendingLearderBoardReq) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *VideoTrendingLearderBoardReq) GetPageSize() (v int32) {
	return p.PageSize
}
func (p *VideoTrendingLearderBoardReq) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *VideoTrendingLearderBoardReq) SetPageSize(val int32) {
	p.PageSize = val
}

func (p *VideoTrendingLearderBoardReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoTrendingLearderBoardReq(%+v)", *p)
}

func (p *VideoTrendingLearderBoardReq) DeepEqual(ano *VideoTrendingLearderBoardReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *VideoTrendingLearderBoardReq) Field1DeepEqual(src int32) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *VideoTrendingLearderBoardReq) Field2DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

var fieldIDToName_VideoTrendingLearderBoardReq = map[int16]string{
	1: "page_num",
	2: "page_size",
}

type VideoTrendingLearderBoardResp struct {
	VideoIds       []string `thrift:"video_ids,1,required" frugal:"1,required,list<string>" json:"video_ids"`
	VideoNames     []string `thrift:"video_names,2,required" frugal:"2,required,list<string>" json:"video_names"`
	VideoUrls      []string `thrift:"video_urls,3,required" frugal:"3,required,list<string>" json:"video_urls"`
	VideoCoverUrls []string `thrift:"video_cover_urls,4,required" frugal:"4,required,list<string>" json:"video_cover_urls"`
	VideoDescs     []string `thrift:"video_descs,5,required" frugal:"5,required,list<string>" json:"video_descs"`
	VideoTags      []string `thrift:"video_tags,6,required" frugal:"6,required,list<string>" json:"video_tags"`
}

func NewVideoTrendingLearderBoardResp() *VideoTrendingLearderBoardResp {
	return &VideoTrendingLearderBoardResp{}
}

func (p *VideoTrendingLearderBoardResp) InitDefault() {
}

func (p *VideoTrendingLearderBoardResp) GetVideoIds() (v []string) {
	return p.VideoIds
}

func (p *VideoTrendingLearderBoardResp) GetVideoNames() (v []string) {
	return p.VideoNames
}

func (p *VideoTrendingLearderBoardResp) GetVideoUrls() (v []string) {
	return p.VideoUrls
}

func (p *VideoTrendingLearderBoardResp) GetVideoCoverUrls() (v []string) {
	return p.VideoCoverUrls
}

func (p *VideoTrendingLearderBoardResp) GetVideoDescs() (v []string) {
	return p.VideoDescs
}

func (p *VideoTrendingLearderBoardResp) GetVideoTags() (v []string) {
	return p.VideoTags
}
func (p *VideoTrendingLearderBoardResp) SetVideoIds(val []string) {
	p.VideoIds = val
}
func (p *VideoTrendingLearderBoardResp) SetVideoNames(val []string) {
	p.VideoNames = val
}
func (p *VideoTrendingLearderBoardResp) SetVideoUrls(val []string) {
	p.VideoUrls = val
}
func (p *VideoTrendingLearderBoardResp) SetVideoCoverUrls(val []string) {
	p.VideoCoverUrls = val
}
func (p *VideoTrendingLearderBoardResp) SetVideoDescs(val []string) {
	p.VideoDescs = val
}
func (p *VideoTrendingLearderBoardResp) SetVideoTags(val []string) {
	p.VideoTags = val
}

func (p *VideoTrendingLearderBoardResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoTrendingLearderBoardResp(%+v)", *p)
}

func (p *VideoTrendingLearderBoardResp) DeepEqual(ano *VideoTrendingLearderBoardResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoIds) {
		return false
	}
	if !p.Field2DeepEqual(ano.VideoNames) {
		return false
	}
	if !p.Field3DeepEqual(ano.VideoUrls) {
		return false
	}
	if !p.Field4DeepEqual(ano.VideoCoverUrls) {
		return false
	}
	if !p.Field5DeepEqual(ano.VideoDescs) {
		return false
	}
	if !p.Field6DeepEqual(ano.VideoTags) {
		return false
	}
	return true
}

func (p *VideoTrendingLearderBoardResp) Field1DeepEqual(src []string) bool {

	if len(p.VideoIds) != len(src) {
		return false
	}
	for i, v := range p.VideoIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *VideoTrendingLearderBoardResp) Field2DeepEqual(src []string) bool {

	if len(p.VideoNames) != len(src) {
		return false
	}
	for i, v := range p.VideoNames {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *VideoTrendingLearderBoardResp) Field3DeepEqual(src []string) bool {

	if len(p.VideoUrls) != len(src) {
		return false
	}
	for i, v := range p.VideoUrls {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *VideoTrendingLearderBoardResp) Field4DeepEqual(src []string) bool {

	if len(p.VideoCoverUrls) != len(src) {
		return false
	}
	for i, v := range p.VideoCoverUrls {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *VideoTrendingLearderBoardResp) Field5DeepEqual(src []string) bool {

	if len(p.VideoDescs) != len(src) {
		return false
	}
	for i, v := range p.VideoDescs {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *VideoTrendingLearderBoardResp) Field6DeepEqual(src []string) bool {

	if len(p.VideoTags) != len(src) {
		return false
	}
	for i, v := range p.VideoTags {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

var fieldIDToName_VideoTrendingLearderBoardResp = map[int16]string{
	1: "video_ids",
	2: "video_names",
	3: "video_urls",
	4: "video_cover_urls",
	5: "video_descs",
	6: "video_tags",
}

type VideoService interface {
	VideoSubmission(ctx context.Context, req *VideoSubmissionReq) (r *VideoSubmissionResp, err error)

	VideoList(ctx context.Context, req *VideoListReq) (r *VideoListResp, err error)

	VideoSearch(ctx context.Context, req *VideoSearchReq) (r *VideoSearchResp, err error)

	VideoTrendingLearderBoard(ctx context.Context, req *VideoTrendingLearderBoardReq) (r *VideoTrendingLearderBoardResp, err error)
}

type VideoServiceVideoSubmissionArgs struct {
	Req *VideoSubmissionReq `thrift:"req,1" frugal:"1,default,VideoSubmissionReq" json:"req"`
}

func NewVideoServiceVideoSubmissionArgs() *VideoServiceVideoSubmissionArgs {
	return &VideoServiceVideoSubmissionArgs{}
}

func (p *VideoServiceVideoSubmissionArgs) InitDefault() {
}

var VideoServiceVideoSubmissionArgs_Req_DEFAULT *VideoSubmissionReq

func (p *VideoServiceVideoSubmissionArgs) GetReq() (v *VideoSubmissionReq) {
	if !p.IsSetReq() {
		return VideoServiceVideoSubmissionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoSubmissionArgs) SetReq(val *VideoSubmissionReq) {
	p.Req = val
}

func (p *VideoServiceVideoSubmissionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoSubmissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoSubmissionArgs(%+v)", *p)
}

func (p *VideoServiceVideoSubmissionArgs) DeepEqual(ano *VideoServiceVideoSubmissionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoServiceVideoSubmissionArgs) Field1DeepEqual(src *VideoSubmissionReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoSubmissionArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoSubmissionResult struct {
	Success *VideoSubmissionResp `thrift:"success,0,optional" frugal:"0,optional,VideoSubmissionResp" json:"success,omitempty"`
}

func NewVideoServiceVideoSubmissionResult() *VideoServiceVideoSubmissionResult {
	return &VideoServiceVideoSubmissionResult{}
}

func (p *VideoServiceVideoSubmissionResult) InitDefault() {
}

var VideoServiceVideoSubmissionResult_Success_DEFAULT *VideoSubmissionResp

func (p *VideoServiceVideoSubmissionResult) GetSuccess() (v *VideoSubmissionResp) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoSubmissionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoSubmissionResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoSubmissionResp)
}

func (p *VideoServiceVideoSubmissionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoSubmissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoSubmissionResult(%+v)", *p)
}

func (p *VideoServiceVideoSubmissionResult) DeepEqual(ano *VideoServiceVideoSubmissionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceVideoSubmissionResult) Field0DeepEqual(src *VideoSubmissionResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoSubmissionResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoListArgs struct {
	Req *VideoListReq `thrift:"req,1" frugal:"1,default,VideoListReq" json:"req"`
}

func NewVideoServiceVideoListArgs() *VideoServiceVideoListArgs {
	return &VideoServiceVideoListArgs{}
}

func (p *VideoServiceVideoListArgs) InitDefault() {
}

var VideoServiceVideoListArgs_Req_DEFAULT *VideoListReq

func (p *VideoServiceVideoListArgs) GetReq() (v *VideoListReq) {
	if !p.IsSetReq() {
		return VideoServiceVideoListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoListArgs) SetReq(val *VideoListReq) {
	p.Req = val
}

func (p *VideoServiceVideoListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoListArgs(%+v)", *p)
}

func (p *VideoServiceVideoListArgs) DeepEqual(ano *VideoServiceVideoListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoServiceVideoListArgs) Field1DeepEqual(src *VideoListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoListArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoListResult struct {
	Success *VideoListResp `thrift:"success,0,optional" frugal:"0,optional,VideoListResp" json:"success,omitempty"`
}

func NewVideoServiceVideoListResult() *VideoServiceVideoListResult {
	return &VideoServiceVideoListResult{}
}

func (p *VideoServiceVideoListResult) InitDefault() {
}

var VideoServiceVideoListResult_Success_DEFAULT *VideoListResp

func (p *VideoServiceVideoListResult) GetSuccess() (v *VideoListResp) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoListResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoListResp)
}

func (p *VideoServiceVideoListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoListResult(%+v)", *p)
}

func (p *VideoServiceVideoListResult) DeepEqual(ano *VideoServiceVideoListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceVideoListResult) Field0DeepEqual(src *VideoListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoListResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoSearchArgs struct {
	Req *VideoSearchReq `thrift:"req,1" frugal:"1,default,VideoSearchReq" json:"req"`
}

func NewVideoServiceVideoSearchArgs() *VideoServiceVideoSearchArgs {
	return &VideoServiceVideoSearchArgs{}
}

func (p *VideoServiceVideoSearchArgs) InitDefault() {
}

var VideoServiceVideoSearchArgs_Req_DEFAULT *VideoSearchReq

func (p *VideoServiceVideoSearchArgs) GetReq() (v *VideoSearchReq) {
	if !p.IsSetReq() {
		return VideoServiceVideoSearchArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoSearchArgs) SetReq(val *VideoSearchReq) {
	p.Req = val
}

func (p *VideoServiceVideoSearchArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoSearchArgs(%+v)", *p)
}

func (p *VideoServiceVideoSearchArgs) DeepEqual(ano *VideoServiceVideoSearchArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoServiceVideoSearchArgs) Field1DeepEqual(src *VideoSearchReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoSearchArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoSearchResult struct {
	Success *VideoSearchResp `thrift:"success,0,optional" frugal:"0,optional,VideoSearchResp" json:"success,omitempty"`
}

func NewVideoServiceVideoSearchResult() *VideoServiceVideoSearchResult {
	return &VideoServiceVideoSearchResult{}
}

func (p *VideoServiceVideoSearchResult) InitDefault() {
}

var VideoServiceVideoSearchResult_Success_DEFAULT *VideoSearchResp

func (p *VideoServiceVideoSearchResult) GetSuccess() (v *VideoSearchResp) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoSearchResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoSearchResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoSearchResp)
}

func (p *VideoServiceVideoSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoSearchResult(%+v)", *p)
}

func (p *VideoServiceVideoSearchResult) DeepEqual(ano *VideoServiceVideoSearchResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceVideoSearchResult) Field0DeepEqual(src *VideoSearchResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoSearchResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoTrendingLearderBoardArgs struct {
	Req *VideoTrendingLearderBoardReq `thrift:"req,1" frugal:"1,default,VideoTrendingLearderBoardReq" json:"req"`
}

func NewVideoServiceVideoTrendingLearderBoardArgs() *VideoServiceVideoTrendingLearderBoardArgs {
	return &VideoServiceVideoTrendingLearderBoardArgs{}
}

func (p *VideoServiceVideoTrendingLearderBoardArgs) InitDefault() {
}

var VideoServiceVideoTrendingLearderBoardArgs_Req_DEFAULT *VideoTrendingLearderBoardReq

func (p *VideoServiceVideoTrendingLearderBoardArgs) GetReq() (v *VideoTrendingLearderBoardReq) {
	if !p.IsSetReq() {
		return VideoServiceVideoTrendingLearderBoardArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoTrendingLearderBoardArgs) SetReq(val *VideoTrendingLearderBoardReq) {
	p.Req = val
}

func (p *VideoServiceVideoTrendingLearderBoardArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoTrendingLearderBoardArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoTrendingLearderBoardArgs(%+v)", *p)
}

func (p *VideoServiceVideoTrendingLearderBoardArgs) DeepEqual(ano *VideoServiceVideoTrendingLearderBoardArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoServiceVideoTrendingLearderBoardArgs) Field1DeepEqual(src *VideoTrendingLearderBoardReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoTrendingLearderBoardArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoTrendingLearderBoardResult struct {
	Success *VideoTrendingLearderBoardResp `thrift:"success,0,optional" frugal:"0,optional,VideoTrendingLearderBoardResp" json:"success,omitempty"`
}

func NewVideoServiceVideoTrendingLearderBoardResult() *VideoServiceVideoTrendingLearderBoardResult {
	return &VideoServiceVideoTrendingLearderBoardResult{}
}

func (p *VideoServiceVideoTrendingLearderBoardResult) InitDefault() {
}

var VideoServiceVideoTrendingLearderBoardResult_Success_DEFAULT *VideoTrendingLearderBoardResp

func (p *VideoServiceVideoTrendingLearderBoardResult) GetSuccess() (v *VideoTrendingLearderBoardResp) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoTrendingLearderBoardResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoTrendingLearderBoardResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoTrendingLearderBoardResp)
}

func (p *VideoServiceVideoTrendingLearderBoardResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoTrendingLearderBoardResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoTrendingLearderBoardResult(%+v)", *p)
}

func (p *VideoServiceVideoTrendingLearderBoardResult) DeepEqual(ano *VideoServiceVideoTrendingLearderBoardResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceVideoTrendingLearderBoardResult) Field0DeepEqual(src *VideoTrendingLearderBoardResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoTrendingLearderBoardResult = map[int16]string{
	0: "success",
}

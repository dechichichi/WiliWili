// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package video

import (
	"context"
	"fmt"
	"strings"
)

type Video struct {
	VideoId       string `thrift:"video_id,1,required" frugal:"1,required,string" json:"video_id"`
	VideoName     string `thrift:"video_name,2,required" frugal:"2,required,string" json:"video_name"`
	VideoUrl      string `thrift:"video_url,3,required" frugal:"3,required,string" json:"video_url"`
	VideoDuration int32  `thrift:"video_duration,4,required" frugal:"4,required,i32" json:"video_duration"`
}

func NewVideo() *Video {
	return &Video{}
}

func (p *Video) InitDefault() {
}

func (p *Video) GetVideoId() (v string) {
	return p.VideoId
}

func (p *Video) GetVideoName() (v string) {
	return p.VideoName
}

func (p *Video) GetVideoUrl() (v string) {
	return p.VideoUrl
}

func (p *Video) GetVideoDuration() (v int32) {
	return p.VideoDuration
}
func (p *Video) SetVideoId(val string) {
	p.VideoId = val
}
func (p *Video) SetVideoName(val string) {
	p.VideoName = val
}
func (p *Video) SetVideoUrl(val string) {
	p.VideoUrl = val
}
func (p *Video) SetVideoDuration(val int32) {
	p.VideoDuration = val
}

func (p *Video) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Video(%+v)", *p)
}

func (p *Video) DeepEqual(ano *Video) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoId) {
		return false
	}
	if !p.Field2DeepEqual(ano.VideoName) {
		return false
	}
	if !p.Field3DeepEqual(ano.VideoUrl) {
		return false
	}
	if !p.Field4DeepEqual(ano.VideoDuration) {
		return false
	}
	return true
}

func (p *Video) Field1DeepEqual(src string) bool {

	if strings.Compare(p.VideoId, src) != 0 {
		return false
	}
	return true
}
func (p *Video) Field2DeepEqual(src string) bool {

	if strings.Compare(p.VideoName, src) != 0 {
		return false
	}
	return true
}
func (p *Video) Field3DeepEqual(src string) bool {

	if strings.Compare(p.VideoUrl, src) != 0 {
		return false
	}
	return true
}
func (p *Video) Field4DeepEqual(src int32) bool {

	if p.VideoDuration != src {
		return false
	}
	return true
}

var fieldIDToName_Video = map[int16]string{
	1: "video_id",
	2: "video_name",
	3: "video_url",
	4: "video_duration",
}

type VideoSubmissionReq struct {
	Userid string `thrift:"userid,1,required" frugal:"1,required,string" json:"userid"`
	Video  *Video `thrift:"video,2,required" frugal:"2,required,Video" json:"video"`
}

func NewVideoSubmissionReq() *VideoSubmissionReq {
	return &VideoSubmissionReq{}
}

func (p *VideoSubmissionReq) InitDefault() {
}

func (p *VideoSubmissionReq) GetUserid() (v string) {
	return p.Userid
}

var VideoSubmissionReq_Video_DEFAULT *Video

func (p *VideoSubmissionReq) GetVideo() (v *Video) {
	if !p.IsSetVideo() {
		return VideoSubmissionReq_Video_DEFAULT
	}
	return p.Video
}
func (p *VideoSubmissionReq) SetUserid(val string) {
	p.Userid = val
}
func (p *VideoSubmissionReq) SetVideo(val *Video) {
	p.Video = val
}

func (p *VideoSubmissionReq) IsSetVideo() bool {
	return p.Video != nil
}

func (p *VideoSubmissionReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSubmissionReq(%+v)", *p)
}

func (p *VideoSubmissionReq) DeepEqual(ano *VideoSubmissionReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Userid) {
		return false
	}
	if !p.Field2DeepEqual(ano.Video) {
		return false
	}
	return true
}

func (p *VideoSubmissionReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Userid, src) != 0 {
		return false
	}
	return true
}
func (p *VideoSubmissionReq) Field2DeepEqual(src *Video) bool {

	if !p.Video.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoSubmissionReq = map[int16]string{
	1: "userid",
	2: "video",
}

type VideoSubmissionResp struct {
	Success bool `thrift:"success,1,required" frugal:"1,required,bool" json:"success"`
}

func NewVideoSubmissionResp() *VideoSubmissionResp {
	return &VideoSubmissionResp{}
}

func (p *VideoSubmissionResp) InitDefault() {
}

func (p *VideoSubmissionResp) GetSuccess() (v bool) {
	return p.Success
}
func (p *VideoSubmissionResp) SetSuccess(val bool) {
	p.Success = val
}

func (p *VideoSubmissionResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSubmissionResp(%+v)", *p)
}

func (p *VideoSubmissionResp) DeepEqual(ano *VideoSubmissionResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoSubmissionResp) Field1DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}

var fieldIDToName_VideoSubmissionResp = map[int16]string{
	1: "success",
}

type VideoListReq struct {
	Userid   string `thrift:"userid,1,required" frugal:"1,required,string" json:"userid"`
	PageNum  int32  `thrift:"page_num,2,required" frugal:"2,required,i32" json:"page_num"`
	PageSize int32  `thrift:"page_size,3,required" frugal:"3,required,i32" json:"page_size"`
}

func NewVideoListReq() *VideoListReq {
	return &VideoListReq{}
}

func (p *VideoListReq) InitDefault() {
}

func (p *VideoListReq) GetUserid() (v string) {
	return p.Userid
}

func (p *VideoListReq) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *VideoListReq) GetPageSize() (v int32) {
	return p.PageSize
}
func (p *VideoListReq) SetUserid(val string) {
	p.Userid = val
}
func (p *VideoListReq) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *VideoListReq) SetPageSize(val int32) {
	p.PageSize = val
}

func (p *VideoListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoListReq(%+v)", *p)
}

func (p *VideoListReq) DeepEqual(ano *VideoListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Userid) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *VideoListReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Userid, src) != 0 {
		return false
	}
	return true
}
func (p *VideoListReq) Field2DeepEqual(src int32) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *VideoListReq) Field3DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

var fieldIDToName_VideoListReq = map[int16]string{
	1: "userid",
	2: "page_num",
	3: "page_size",
}

type VideoListResp struct {
	Videos []*Video `thrift:"videos,1,required" frugal:"1,required,list<Video>" json:"videos"`
}

func NewVideoListResp() *VideoListResp {
	return &VideoListResp{}
}

func (p *VideoListResp) InitDefault() {
}

func (p *VideoListResp) GetVideos() (v []*Video) {
	return p.Videos
}
func (p *VideoListResp) SetVideos(val []*Video) {
	p.Videos = val
}

func (p *VideoListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoListResp(%+v)", *p)
}

func (p *VideoListResp) DeepEqual(ano *VideoListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Videos) {
		return false
	}
	return true
}

func (p *VideoListResp) Field1DeepEqual(src []*Video) bool {

	if len(p.Videos) != len(src) {
		return false
	}
	for i, v := range p.Videos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_VideoListResp = map[int16]string{
	1: "videos",
}

type VideoSearchReq struct {
	Keyword  string `thrift:"keyword,1,required" frugal:"1,required,string" json:"keyword"`
	PageNum  int32  `thrift:"page_num,2,required" frugal:"2,required,i32" json:"page_num"`
	PageSize int32  `thrift:"page_size,3,required" frugal:"3,required,i32" json:"page_size"`
}

func NewVideoSearchReq() *VideoSearchReq {
	return &VideoSearchReq{}
}

func (p *VideoSearchReq) InitDefault() {
}

func (p *VideoSearchReq) GetKeyword() (v string) {
	return p.Keyword
}

func (p *VideoSearchReq) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *VideoSearchReq) GetPageSize() (v int32) {
	return p.PageSize
}
func (p *VideoSearchReq) SetKeyword(val string) {
	p.Keyword = val
}
func (p *VideoSearchReq) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *VideoSearchReq) SetPageSize(val int32) {
	p.PageSize = val
}

func (p *VideoSearchReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSearchReq(%+v)", *p)
}

func (p *VideoSearchReq) DeepEqual(ano *VideoSearchReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Keyword) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *VideoSearchReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Keyword, src) != 0 {
		return false
	}
	return true
}
func (p *VideoSearchReq) Field2DeepEqual(src int32) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *VideoSearchReq) Field3DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

var fieldIDToName_VideoSearchReq = map[int16]string{
	1: "keyword",
	2: "page_num",
	3: "page_size",
}

type VideoSearchResp struct {
	Videos []*Video `thrift:"videos,1,required" frugal:"1,required,list<Video>" json:"videos"`
}

func NewVideoSearchResp() *VideoSearchResp {
	return &VideoSearchResp{}
}

func (p *VideoSearchResp) InitDefault() {
}

func (p *VideoSearchResp) GetVideos() (v []*Video) {
	return p.Videos
}
func (p *VideoSearchResp) SetVideos(val []*Video) {
	p.Videos = val
}

func (p *VideoSearchResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSearchResp(%+v)", *p)
}

func (p *VideoSearchResp) DeepEqual(ano *VideoSearchResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Videos) {
		return false
	}
	return true
}

func (p *VideoSearchResp) Field1DeepEqual(src []*Video) bool {

	if len(p.Videos) != len(src) {
		return false
	}
	for i, v := range p.Videos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_VideoSearchResp = map[int16]string{
	1: "videos",
}

type VideoTrendingReq struct {
	PageNum  int32 `thrift:"page_num,1,required" frugal:"1,required,i32" json:"page_num"`
	PageSize int32 `thrift:"page_size,2,required" frugal:"2,required,i32" json:"page_size"`
}

func NewVideoTrendingReq() *VideoTrendingReq {
	return &VideoTrendingReq{}
}

func (p *VideoTrendingReq) InitDefault() {
}

func (p *VideoTrendingReq) GetPageNum() (v int32) {
	return p.PageNum
}

func (p *VideoTrendingReq) GetPageSize() (v int32) {
	return p.PageSize
}
func (p *VideoTrendingReq) SetPageNum(val int32) {
	p.PageNum = val
}
func (p *VideoTrendingReq) SetPageSize(val int32) {
	p.PageSize = val
}

func (p *VideoTrendingReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoTrendingReq(%+v)", *p)
}

func (p *VideoTrendingReq) DeepEqual(ano *VideoTrendingReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *VideoTrendingReq) Field1DeepEqual(src int32) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *VideoTrendingReq) Field2DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

var fieldIDToName_VideoTrendingReq = map[int16]string{
	1: "page_num",
	2: "page_size",
}

type VideoTrendingResp struct {
	Videos []*Video `thrift:"videos,1,required" frugal:"1,required,list<Video>" json:"videos"`
}

func NewVideoTrendingResp() *VideoTrendingResp {
	return &VideoTrendingResp{}
}

func (p *VideoTrendingResp) InitDefault() {
}

func (p *VideoTrendingResp) GetVideos() (v []*Video) {
	return p.Videos
}
func (p *VideoTrendingResp) SetVideos(val []*Video) {
	p.Videos = val
}

func (p *VideoTrendingResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoTrendingResp(%+v)", *p)
}

func (p *VideoTrendingResp) DeepEqual(ano *VideoTrendingResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Videos) {
		return false
	}
	return true
}

func (p *VideoTrendingResp) Field1DeepEqual(src []*Video) bool {

	if len(p.Videos) != len(src) {
		return false
	}
	for i, v := range p.Videos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_VideoTrendingResp = map[int16]string{
	1: "videos",
}

type VideoService interface {
	VideoSubmission(ctx context.Context, req *VideoSubmissionReq) (r *VideoSubmissionResp, err error)

	VideoList(ctx context.Context, req *VideoListReq) (r *VideoListResp, err error)

	VideoSearch(ctx context.Context, req *VideoSearchReq) (r *VideoSearchResp, err error)

	VideoTrending(ctx context.Context, req *VideoTrendingReq) (r *VideoTrendingResp, err error)
}

type VideoServiceVideoSubmissionArgs struct {
	Req *VideoSubmissionReq `thrift:"req,1" frugal:"1,default,VideoSubmissionReq" json:"req"`
}

func NewVideoServiceVideoSubmissionArgs() *VideoServiceVideoSubmissionArgs {
	return &VideoServiceVideoSubmissionArgs{}
}

func (p *VideoServiceVideoSubmissionArgs) InitDefault() {
}

var VideoServiceVideoSubmissionArgs_Req_DEFAULT *VideoSubmissionReq

func (p *VideoServiceVideoSubmissionArgs) GetReq() (v *VideoSubmissionReq) {
	if !p.IsSetReq() {
		return VideoServiceVideoSubmissionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoSubmissionArgs) SetReq(val *VideoSubmissionReq) {
	p.Req = val
}

func (p *VideoServiceVideoSubmissionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoSubmissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoSubmissionArgs(%+v)", *p)
}

func (p *VideoServiceVideoSubmissionArgs) DeepEqual(ano *VideoServiceVideoSubmissionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoServiceVideoSubmissionArgs) Field1DeepEqual(src *VideoSubmissionReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoSubmissionArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoSubmissionResult struct {
	Success *VideoSubmissionResp `thrift:"success,0,optional" frugal:"0,optional,VideoSubmissionResp" json:"success,omitempty"`
}

func NewVideoServiceVideoSubmissionResult() *VideoServiceVideoSubmissionResult {
	return &VideoServiceVideoSubmissionResult{}
}

func (p *VideoServiceVideoSubmissionResult) InitDefault() {
}

var VideoServiceVideoSubmissionResult_Success_DEFAULT *VideoSubmissionResp

func (p *VideoServiceVideoSubmissionResult) GetSuccess() (v *VideoSubmissionResp) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoSubmissionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoSubmissionResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoSubmissionResp)
}

func (p *VideoServiceVideoSubmissionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoSubmissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoSubmissionResult(%+v)", *p)
}

func (p *VideoServiceVideoSubmissionResult) DeepEqual(ano *VideoServiceVideoSubmissionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceVideoSubmissionResult) Field0DeepEqual(src *VideoSubmissionResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoSubmissionResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoListArgs struct {
	Req *VideoListReq `thrift:"req,1" frugal:"1,default,VideoListReq" json:"req"`
}

func NewVideoServiceVideoListArgs() *VideoServiceVideoListArgs {
	return &VideoServiceVideoListArgs{}
}

func (p *VideoServiceVideoListArgs) InitDefault() {
}

var VideoServiceVideoListArgs_Req_DEFAULT *VideoListReq

func (p *VideoServiceVideoListArgs) GetReq() (v *VideoListReq) {
	if !p.IsSetReq() {
		return VideoServiceVideoListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoListArgs) SetReq(val *VideoListReq) {
	p.Req = val
}

func (p *VideoServiceVideoListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoListArgs(%+v)", *p)
}

func (p *VideoServiceVideoListArgs) DeepEqual(ano *VideoServiceVideoListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoServiceVideoListArgs) Field1DeepEqual(src *VideoListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoListArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoListResult struct {
	Success *VideoListResp `thrift:"success,0,optional" frugal:"0,optional,VideoListResp" json:"success,omitempty"`
}

func NewVideoServiceVideoListResult() *VideoServiceVideoListResult {
	return &VideoServiceVideoListResult{}
}

func (p *VideoServiceVideoListResult) InitDefault() {
}

var VideoServiceVideoListResult_Success_DEFAULT *VideoListResp

func (p *VideoServiceVideoListResult) GetSuccess() (v *VideoListResp) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoListResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoListResp)
}

func (p *VideoServiceVideoListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoListResult(%+v)", *p)
}

func (p *VideoServiceVideoListResult) DeepEqual(ano *VideoServiceVideoListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceVideoListResult) Field0DeepEqual(src *VideoListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoListResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoSearchArgs struct {
	Req *VideoSearchReq `thrift:"req,1" frugal:"1,default,VideoSearchReq" json:"req"`
}

func NewVideoServiceVideoSearchArgs() *VideoServiceVideoSearchArgs {
	return &VideoServiceVideoSearchArgs{}
}

func (p *VideoServiceVideoSearchArgs) InitDefault() {
}

var VideoServiceVideoSearchArgs_Req_DEFAULT *VideoSearchReq

func (p *VideoServiceVideoSearchArgs) GetReq() (v *VideoSearchReq) {
	if !p.IsSetReq() {
		return VideoServiceVideoSearchArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoSearchArgs) SetReq(val *VideoSearchReq) {
	p.Req = val
}

func (p *VideoServiceVideoSearchArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoSearchArgs(%+v)", *p)
}

func (p *VideoServiceVideoSearchArgs) DeepEqual(ano *VideoServiceVideoSearchArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoServiceVideoSearchArgs) Field1DeepEqual(src *VideoSearchReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoSearchArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoSearchResult struct {
	Success *VideoSearchResp `thrift:"success,0,optional" frugal:"0,optional,VideoSearchResp" json:"success,omitempty"`
}

func NewVideoServiceVideoSearchResult() *VideoServiceVideoSearchResult {
	return &VideoServiceVideoSearchResult{}
}

func (p *VideoServiceVideoSearchResult) InitDefault() {
}

var VideoServiceVideoSearchResult_Success_DEFAULT *VideoSearchResp

func (p *VideoServiceVideoSearchResult) GetSuccess() (v *VideoSearchResp) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoSearchResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoSearchResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoSearchResp)
}

func (p *VideoServiceVideoSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoSearchResult(%+v)", *p)
}

func (p *VideoServiceVideoSearchResult) DeepEqual(ano *VideoServiceVideoSearchResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceVideoSearchResult) Field0DeepEqual(src *VideoSearchResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoSearchResult = map[int16]string{
	0: "success",
}

type VideoServiceVideoTrendingArgs struct {
	Req *VideoTrendingReq `thrift:"req,1" frugal:"1,default,VideoTrendingReq" json:"req"`
}

func NewVideoServiceVideoTrendingArgs() *VideoServiceVideoTrendingArgs {
	return &VideoServiceVideoTrendingArgs{}
}

func (p *VideoServiceVideoTrendingArgs) InitDefault() {
}

var VideoServiceVideoTrendingArgs_Req_DEFAULT *VideoTrendingReq

func (p *VideoServiceVideoTrendingArgs) GetReq() (v *VideoTrendingReq) {
	if !p.IsSetReq() {
		return VideoServiceVideoTrendingArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *VideoServiceVideoTrendingArgs) SetReq(val *VideoTrendingReq) {
	p.Req = val
}

func (p *VideoServiceVideoTrendingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *VideoServiceVideoTrendingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoTrendingArgs(%+v)", *p)
}

func (p *VideoServiceVideoTrendingArgs) DeepEqual(ano *VideoServiceVideoTrendingArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *VideoServiceVideoTrendingArgs) Field1DeepEqual(src *VideoTrendingReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoTrendingArgs = map[int16]string{
	1: "req",
}

type VideoServiceVideoTrendingResult struct {
	Success *VideoTrendingResp `thrift:"success,0,optional" frugal:"0,optional,VideoTrendingResp" json:"success,omitempty"`
}

func NewVideoServiceVideoTrendingResult() *VideoServiceVideoTrendingResult {
	return &VideoServiceVideoTrendingResult{}
}

func (p *VideoServiceVideoTrendingResult) InitDefault() {
}

var VideoServiceVideoTrendingResult_Success_DEFAULT *VideoTrendingResp

func (p *VideoServiceVideoTrendingResult) GetSuccess() (v *VideoTrendingResp) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoTrendingResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoTrendingResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoTrendingResp)
}

func (p *VideoServiceVideoTrendingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoTrendingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoTrendingResult(%+v)", *p)
}

func (p *VideoServiceVideoTrendingResult) DeepEqual(ano *VideoServiceVideoTrendingResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceVideoTrendingResult) Field0DeepEqual(src *VideoTrendingResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_VideoServiceVideoTrendingResult = map[int16]string{
	0: "success",
}

// Code generated by Kitex v0.12.1. DO NOT EDIT.

package videoservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	video "wiliwili/kitex_gen/video"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"videoSubmission": kitex.NewMethodInfo(
		videoSubmissionHandler,
		newVideoServiceVideoSubmissionArgs,
		newVideoServiceVideoSubmissionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"videoGet": kitex.NewMethodInfo(
		videoGetHandler,
		newVideoServiceVideoGetArgs,
		newVideoServiceVideoGetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"videoSearch": kitex.NewMethodInfo(
		videoSearchHandler,
		newVideoServiceVideoSearchArgs,
		newVideoServiceVideoSearchResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"videoTrending": kitex.NewMethodInfo(
		videoTrendingHandler,
		newVideoServiceVideoTrendingArgs,
		newVideoServiceVideoTrendingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	videoServiceServiceInfo                = NewServiceInfo()
	videoServiceServiceInfoForClient       = NewServiceInfoForClient()
	videoServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func videoSubmissionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoSubmissionArgs)
	realResult := result.(*video.VideoServiceVideoSubmissionResult)
	success, err := handler.(video.VideoService).VideoSubmission(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoSubmissionArgs() interface{} {
	return video.NewVideoServiceVideoSubmissionArgs()
}

func newVideoServiceVideoSubmissionResult() interface{} {
	return video.NewVideoServiceVideoSubmissionResult()
}

func videoGetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoGetArgs)
	realResult := result.(*video.VideoServiceVideoGetResult)
	success, err := handler.(video.VideoService).VideoGet(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoGetArgs() interface{} {
	return video.NewVideoServiceVideoGetArgs()
}

func newVideoServiceVideoGetResult() interface{} {
	return video.NewVideoServiceVideoGetResult()
}

func videoSearchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoSearchArgs)
	realResult := result.(*video.VideoServiceVideoSearchResult)
	success, err := handler.(video.VideoService).VideoSearch(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoSearchArgs() interface{} {
	return video.NewVideoServiceVideoSearchArgs()
}

func newVideoServiceVideoSearchResult() interface{} {
	return video.NewVideoServiceVideoSearchResult()
}

func videoTrendingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoTrendingArgs)
	realResult := result.(*video.VideoServiceVideoTrendingResult)
	success, err := handler.(video.VideoService).VideoTrending(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoTrendingArgs() interface{} {
	return video.NewVideoServiceVideoTrendingArgs()
}

func newVideoServiceVideoTrendingResult() interface{} {
	return video.NewVideoServiceVideoTrendingResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) VideoSubmission(ctx context.Context, req *video.VideoSubmissionReq) (r *video.VideoSubmissionResp, err error) {
	var _args video.VideoServiceVideoSubmissionArgs
	_args.Req = req
	var _result video.VideoServiceVideoSubmissionResult
	if err = p.c.Call(ctx, "videoSubmission", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoGet(ctx context.Context, req *video.VideoGetReq) (r *video.VideoGetResp, err error) {
	var _args video.VideoServiceVideoGetArgs
	_args.Req = req
	var _result video.VideoServiceVideoGetResult
	if err = p.c.Call(ctx, "videoGet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoSearch(ctx context.Context, req *video.VideoSearchReq) (r *video.VideoSearchResp, err error) {
	var _args video.VideoServiceVideoSearchArgs
	_args.Req = req
	var _result video.VideoServiceVideoSearchResult
	if err = p.c.Call(ctx, "videoSearch", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoTrending(ctx context.Context, req *video.VideoTrendingReq) (r *video.VideoTrendingResp, err error) {
	var _args video.VideoServiceVideoTrendingArgs
	_args.Req = req
	var _result video.VideoServiceVideoTrendingResult
	if err = p.c.Call(ctx, "videoTrending", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

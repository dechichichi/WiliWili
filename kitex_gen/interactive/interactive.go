// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package interactive

import (
	"context"
	"fmt"
	"strings"
)

type LikeOperationReq struct {
	UserId int64 `thrift:"userId,1,required" frugal:"1,required,i64" json:"userId"`
	PostId int64 `thrift:"postId,2,required" frugal:"2,required,i64" json:"postId"`
	IsLike bool  `thrift:"isLike,3,required" frugal:"3,required,bool" json:"isLike"`
}

func NewLikeOperationReq() *LikeOperationReq {
	return &LikeOperationReq{}
}

func (p *LikeOperationReq) InitDefault() {
}

func (p *LikeOperationReq) GetUserId() (v int64) {
	return p.UserId
}

func (p *LikeOperationReq) GetPostId() (v int64) {
	return p.PostId
}

func (p *LikeOperationReq) GetIsLike() (v bool) {
	return p.IsLike
}
func (p *LikeOperationReq) SetUserId(val int64) {
	p.UserId = val
}
func (p *LikeOperationReq) SetPostId(val int64) {
	p.PostId = val
}
func (p *LikeOperationReq) SetIsLike(val bool) {
	p.IsLike = val
}

func (p *LikeOperationReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeOperationReq(%+v)", *p)
}

func (p *LikeOperationReq) DeepEqual(ano *LikeOperationReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PostId) {
		return false
	}
	if !p.Field3DeepEqual(ano.IsLike) {
		return false
	}
	return true
}

func (p *LikeOperationReq) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *LikeOperationReq) Field2DeepEqual(src int64) bool {

	if p.PostId != src {
		return false
	}
	return true
}
func (p *LikeOperationReq) Field3DeepEqual(src bool) bool {

	if p.IsLike != src {
		return false
	}
	return true
}

var fieldIDToName_LikeOperationReq = map[int16]string{
	1: "userId",
	2: "postId",
	3: "isLike",
}

type LikeOperationResp struct {
	Success bool    `thrift:"success,1,required" frugal:"1,required,bool" json:"success"`
	Error   *string `thrift:"error,2,optional" frugal:"2,optional,string" json:"error,omitempty"`
}

func NewLikeOperationResp() *LikeOperationResp {
	return &LikeOperationResp{}
}

func (p *LikeOperationResp) InitDefault() {
}

func (p *LikeOperationResp) GetSuccess() (v bool) {
	return p.Success
}

var LikeOperationResp_Error_DEFAULT string

func (p *LikeOperationResp) GetError() (v string) {
	if !p.IsSetError() {
		return LikeOperationResp_Error_DEFAULT
	}
	return *p.Error
}
func (p *LikeOperationResp) SetSuccess(val bool) {
	p.Success = val
}
func (p *LikeOperationResp) SetError(val *string) {
	p.Error = val
}

func (p *LikeOperationResp) IsSetError() bool {
	return p.Error != nil
}

func (p *LikeOperationResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeOperationResp(%+v)", *p)
}

func (p *LikeOperationResp) DeepEqual(ano *LikeOperationResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Success) {
		return false
	}
	if !p.Field2DeepEqual(ano.Error) {
		return false
	}
	return true
}

func (p *LikeOperationResp) Field1DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}
func (p *LikeOperationResp) Field2DeepEqual(src *string) bool {

	if p.Error == src {
		return true
	} else if p.Error == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Error, *src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_LikeOperationResp = map[int16]string{
	1: "success",
	2: "error",
}

type LikeListReq struct {
	UserId int64 `thrift:"userId,1,required" frugal:"1,required,i64" json:"userId"`
}

func NewLikeListReq() *LikeListReq {
	return &LikeListReq{}
}

func (p *LikeListReq) InitDefault() {
}

func (p *LikeListReq) GetUserId() (v int64) {
	return p.UserId
}
func (p *LikeListReq) SetUserId(val int64) {
	p.UserId = val
}

func (p *LikeListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeListReq(%+v)", *p)
}

func (p *LikeListReq) DeepEqual(ano *LikeListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *LikeListReq) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_LikeListReq = map[int16]string{
	1: "userId",
}

type LikeListResp struct {
	PostIdList []int64 `thrift:"postIdList,1,required" frugal:"1,required,list<i64>" json:"postIdList"`
}

func NewLikeListResp() *LikeListResp {
	return &LikeListResp{}
}

func (p *LikeListResp) InitDefault() {
}

func (p *LikeListResp) GetPostIdList() (v []int64) {
	return p.PostIdList
}
func (p *LikeListResp) SetPostIdList(val []int64) {
	p.PostIdList = val
}

func (p *LikeListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LikeListResp(%+v)", *p)
}

func (p *LikeListResp) DeepEqual(ano *LikeListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PostIdList) {
		return false
	}
	return true
}

func (p *LikeListResp) Field1DeepEqual(src []int64) bool {

	if len(p.PostIdList) != len(src) {
		return false
	}
	for i, v := range p.PostIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

var fieldIDToName_LikeListResp = map[int16]string{
	1: "postIdList",
}

type CommentReq struct {
	UserId  int64  `thrift:"userId,1,required" frugal:"1,required,i64" json:"userId"`
	PostId  int64  `thrift:"postId,2,required" frugal:"2,required,i64" json:"postId"`
	Content string `thrift:"content,3,required" frugal:"3,required,string" json:"content"`
}

func NewCommentReq() *CommentReq {
	return &CommentReq{}
}

func (p *CommentReq) InitDefault() {
}

func (p *CommentReq) GetUserId() (v int64) {
	return p.UserId
}

func (p *CommentReq) GetPostId() (v int64) {
	return p.PostId
}

func (p *CommentReq) GetContent() (v string) {
	return p.Content
}
func (p *CommentReq) SetUserId(val int64) {
	p.UserId = val
}
func (p *CommentReq) SetPostId(val int64) {
	p.PostId = val
}
func (p *CommentReq) SetContent(val string) {
	p.Content = val
}

func (p *CommentReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentReq(%+v)", *p)
}

func (p *CommentReq) DeepEqual(ano *CommentReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PostId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *CommentReq) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *CommentReq) Field2DeepEqual(src int64) bool {

	if p.PostId != src {
		return false
	}
	return true
}
func (p *CommentReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_CommentReq = map[int16]string{
	1: "userId",
	2: "postId",
	3: "content",
}

type CommentResp struct {
	Success bool    `thrift:"success,1,required" frugal:"1,required,bool" json:"success"`
	Error   *string `thrift:"error,2,optional" frugal:"2,optional,string" json:"error,omitempty"`
}

func NewCommentResp() *CommentResp {
	return &CommentResp{}
}

func (p *CommentResp) InitDefault() {
}

func (p *CommentResp) GetSuccess() (v bool) {
	return p.Success
}

var CommentResp_Error_DEFAULT string

func (p *CommentResp) GetError() (v string) {
	if !p.IsSetError() {
		return CommentResp_Error_DEFAULT
	}
	return *p.Error
}
func (p *CommentResp) SetSuccess(val bool) {
	p.Success = val
}
func (p *CommentResp) SetError(val *string) {
	p.Error = val
}

func (p *CommentResp) IsSetError() bool {
	return p.Error != nil
}

func (p *CommentResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentResp(%+v)", *p)
}

func (p *CommentResp) DeepEqual(ano *CommentResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Success) {
		return false
	}
	if !p.Field2DeepEqual(ano.Error) {
		return false
	}
	return true
}

func (p *CommentResp) Field1DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}
func (p *CommentResp) Field2DeepEqual(src *string) bool {

	if p.Error == src {
		return true
	} else if p.Error == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Error, *src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_CommentResp = map[int16]string{
	1: "success",
	2: "error",
}

type CommentListReq struct {
	PostId int64 `thrift:"postId,1,required" frugal:"1,required,i64" json:"postId"`
}

func NewCommentListReq() *CommentListReq {
	return &CommentListReq{}
}

func (p *CommentListReq) InitDefault() {
}

func (p *CommentListReq) GetPostId() (v int64) {
	return p.PostId
}
func (p *CommentListReq) SetPostId(val int64) {
	p.PostId = val
}

func (p *CommentListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentListReq(%+v)", *p)
}

func (p *CommentListReq) DeepEqual(ano *CommentListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PostId) {
		return false
	}
	return true
}

func (p *CommentListReq) Field1DeepEqual(src int64) bool {

	if p.PostId != src {
		return false
	}
	return true
}

var fieldIDToName_CommentListReq = map[int16]string{
	1: "postId",
}

type CommentListResp struct {
	CommentList []string `thrift:"commentList,1,required" frugal:"1,required,list<string>" json:"commentList"`
}

func NewCommentListResp() *CommentListResp {
	return &CommentListResp{}
}

func (p *CommentListResp) InitDefault() {
}

func (p *CommentListResp) GetCommentList() (v []string) {
	return p.CommentList
}
func (p *CommentListResp) SetCommentList(val []string) {
	p.CommentList = val
}

func (p *CommentListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentListResp(%+v)", *p)
}

func (p *CommentListResp) DeepEqual(ano *CommentListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CommentList) {
		return false
	}
	return true
}

func (p *CommentListResp) Field1DeepEqual(src []string) bool {

	if len(p.CommentList) != len(src) {
		return false
	}
	for i, v := range p.CommentList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

var fieldIDToName_CommentListResp = map[int16]string{
	1: "commentList",
}

type DeleteCommentReq struct {
	UserId    int64 `thrift:"userId,1,required" frugal:"1,required,i64" json:"userId"`
	CommentId int64 `thrift:"commentId,2,required" frugal:"2,required,i64" json:"commentId"`
}

func NewDeleteCommentReq() *DeleteCommentReq {
	return &DeleteCommentReq{}
}

func (p *DeleteCommentReq) InitDefault() {
}

func (p *DeleteCommentReq) GetUserId() (v int64) {
	return p.UserId
}

func (p *DeleteCommentReq) GetCommentId() (v int64) {
	return p.CommentId
}
func (p *DeleteCommentReq) SetUserId(val int64) {
	p.UserId = val
}
func (p *DeleteCommentReq) SetCommentId(val int64) {
	p.CommentId = val
}

func (p *DeleteCommentReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCommentReq(%+v)", *p)
}

func (p *DeleteCommentReq) DeepEqual(ano *DeleteCommentReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.CommentId) {
		return false
	}
	return true
}

func (p *DeleteCommentReq) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *DeleteCommentReq) Field2DeepEqual(src int64) bool {

	if p.CommentId != src {
		return false
	}
	return true
}

var fieldIDToName_DeleteCommentReq = map[int16]string{
	1: "userId",
	2: "commentId",
}

type DeleteCommentResp struct {
	Success bool    `thrift:"success,1,required" frugal:"1,required,bool" json:"success"`
	Error   *string `thrift:"error,2,optional" frugal:"2,optional,string" json:"error,omitempty"`
}

func NewDeleteCommentResp() *DeleteCommentResp {
	return &DeleteCommentResp{}
}

func (p *DeleteCommentResp) InitDefault() {
}

func (p *DeleteCommentResp) GetSuccess() (v bool) {
	return p.Success
}

var DeleteCommentResp_Error_DEFAULT string

func (p *DeleteCommentResp) GetError() (v string) {
	if !p.IsSetError() {
		return DeleteCommentResp_Error_DEFAULT
	}
	return *p.Error
}
func (p *DeleteCommentResp) SetSuccess(val bool) {
	p.Success = val
}
func (p *DeleteCommentResp) SetError(val *string) {
	p.Error = val
}

func (p *DeleteCommentResp) IsSetError() bool {
	return p.Error != nil
}

func (p *DeleteCommentResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCommentResp(%+v)", *p)
}

func (p *DeleteCommentResp) DeepEqual(ano *DeleteCommentResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Success) {
		return false
	}
	if !p.Field2DeepEqual(ano.Error) {
		return false
	}
	return true
}

func (p *DeleteCommentResp) Field1DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}
func (p *DeleteCommentResp) Field2DeepEqual(src *string) bool {

	if p.Error == src {
		return true
	} else if p.Error == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Error, *src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_DeleteCommentResp = map[int16]string{
	1: "success",
	2: "error",
}

type Interactive interface {
	LikeOperation(ctx context.Context, req *LikeOperationReq) (r *LikeOperationResp, err error)

	LikeList(ctx context.Context, req *LikeListReq) (r *LikeListResp, err error)

	Comment(ctx context.Context, req *CommentReq) (r *CommentResp, err error)

	CommentList(ctx context.Context, req *CommentListReq) (r *CommentListResp, err error)

	DeleteComment(ctx context.Context, req *DeleteCommentReq) (r *DeleteCommentResp, err error)
}

type InteractiveLikeOperationArgs struct {
	Req *LikeOperationReq `thrift:"req,1" frugal:"1,default,LikeOperationReq" json:"req"`
}

func NewInteractiveLikeOperationArgs() *InteractiveLikeOperationArgs {
	return &InteractiveLikeOperationArgs{}
}

func (p *InteractiveLikeOperationArgs) InitDefault() {
}

var InteractiveLikeOperationArgs_Req_DEFAULT *LikeOperationReq

func (p *InteractiveLikeOperationArgs) GetReq() (v *LikeOperationReq) {
	if !p.IsSetReq() {
		return InteractiveLikeOperationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractiveLikeOperationArgs) SetReq(val *LikeOperationReq) {
	p.Req = val
}

func (p *InteractiveLikeOperationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractiveLikeOperationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractiveLikeOperationArgs(%+v)", *p)
}

func (p *InteractiveLikeOperationArgs) DeepEqual(ano *InteractiveLikeOperationArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *InteractiveLikeOperationArgs) Field1DeepEqual(src *LikeOperationReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_InteractiveLikeOperationArgs = map[int16]string{
	1: "req",
}

type InteractiveLikeOperationResult struct {
	Success *LikeOperationResp `thrift:"success,0,optional" frugal:"0,optional,LikeOperationResp" json:"success,omitempty"`
}

func NewInteractiveLikeOperationResult() *InteractiveLikeOperationResult {
	return &InteractiveLikeOperationResult{}
}

func (p *InteractiveLikeOperationResult) InitDefault() {
}

var InteractiveLikeOperationResult_Success_DEFAULT *LikeOperationResp

func (p *InteractiveLikeOperationResult) GetSuccess() (v *LikeOperationResp) {
	if !p.IsSetSuccess() {
		return InteractiveLikeOperationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractiveLikeOperationResult) SetSuccess(x interface{}) {
	p.Success = x.(*LikeOperationResp)
}

func (p *InteractiveLikeOperationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractiveLikeOperationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractiveLikeOperationResult(%+v)", *p)
}

func (p *InteractiveLikeOperationResult) DeepEqual(ano *InteractiveLikeOperationResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InteractiveLikeOperationResult) Field0DeepEqual(src *LikeOperationResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_InteractiveLikeOperationResult = map[int16]string{
	0: "success",
}

type InteractiveLikeListArgs struct {
	Req *LikeListReq `thrift:"req,1" frugal:"1,default,LikeListReq" json:"req"`
}

func NewInteractiveLikeListArgs() *InteractiveLikeListArgs {
	return &InteractiveLikeListArgs{}
}

func (p *InteractiveLikeListArgs) InitDefault() {
}

var InteractiveLikeListArgs_Req_DEFAULT *LikeListReq

func (p *InteractiveLikeListArgs) GetReq() (v *LikeListReq) {
	if !p.IsSetReq() {
		return InteractiveLikeListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractiveLikeListArgs) SetReq(val *LikeListReq) {
	p.Req = val
}

func (p *InteractiveLikeListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractiveLikeListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractiveLikeListArgs(%+v)", *p)
}

func (p *InteractiveLikeListArgs) DeepEqual(ano *InteractiveLikeListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *InteractiveLikeListArgs) Field1DeepEqual(src *LikeListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_InteractiveLikeListArgs = map[int16]string{
	1: "req",
}

type InteractiveLikeListResult struct {
	Success *LikeListResp `thrift:"success,0,optional" frugal:"0,optional,LikeListResp" json:"success,omitempty"`
}

func NewInteractiveLikeListResult() *InteractiveLikeListResult {
	return &InteractiveLikeListResult{}
}

func (p *InteractiveLikeListResult) InitDefault() {
}

var InteractiveLikeListResult_Success_DEFAULT *LikeListResp

func (p *InteractiveLikeListResult) GetSuccess() (v *LikeListResp) {
	if !p.IsSetSuccess() {
		return InteractiveLikeListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractiveLikeListResult) SetSuccess(x interface{}) {
	p.Success = x.(*LikeListResp)
}

func (p *InteractiveLikeListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractiveLikeListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractiveLikeListResult(%+v)", *p)
}

func (p *InteractiveLikeListResult) DeepEqual(ano *InteractiveLikeListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InteractiveLikeListResult) Field0DeepEqual(src *LikeListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_InteractiveLikeListResult = map[int16]string{
	0: "success",
}

type InteractiveCommentArgs struct {
	Req *CommentReq `thrift:"req,1" frugal:"1,default,CommentReq" json:"req"`
}

func NewInteractiveCommentArgs() *InteractiveCommentArgs {
	return &InteractiveCommentArgs{}
}

func (p *InteractiveCommentArgs) InitDefault() {
}

var InteractiveCommentArgs_Req_DEFAULT *CommentReq

func (p *InteractiveCommentArgs) GetReq() (v *CommentReq) {
	if !p.IsSetReq() {
		return InteractiveCommentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractiveCommentArgs) SetReq(val *CommentReq) {
	p.Req = val
}

func (p *InteractiveCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractiveCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractiveCommentArgs(%+v)", *p)
}

func (p *InteractiveCommentArgs) DeepEqual(ano *InteractiveCommentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *InteractiveCommentArgs) Field1DeepEqual(src *CommentReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_InteractiveCommentArgs = map[int16]string{
	1: "req",
}

type InteractiveCommentResult struct {
	Success *CommentResp `thrift:"success,0,optional" frugal:"0,optional,CommentResp" json:"success,omitempty"`
}

func NewInteractiveCommentResult() *InteractiveCommentResult {
	return &InteractiveCommentResult{}
}

func (p *InteractiveCommentResult) InitDefault() {
}

var InteractiveCommentResult_Success_DEFAULT *CommentResp

func (p *InteractiveCommentResult) GetSuccess() (v *CommentResp) {
	if !p.IsSetSuccess() {
		return InteractiveCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractiveCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*CommentResp)
}

func (p *InteractiveCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractiveCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractiveCommentResult(%+v)", *p)
}

func (p *InteractiveCommentResult) DeepEqual(ano *InteractiveCommentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InteractiveCommentResult) Field0DeepEqual(src *CommentResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_InteractiveCommentResult = map[int16]string{
	0: "success",
}

type InteractiveCommentListArgs struct {
	Req *CommentListReq `thrift:"req,1" frugal:"1,default,CommentListReq" json:"req"`
}

func NewInteractiveCommentListArgs() *InteractiveCommentListArgs {
	return &InteractiveCommentListArgs{}
}

func (p *InteractiveCommentListArgs) InitDefault() {
}

var InteractiveCommentListArgs_Req_DEFAULT *CommentListReq

func (p *InteractiveCommentListArgs) GetReq() (v *CommentListReq) {
	if !p.IsSetReq() {
		return InteractiveCommentListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractiveCommentListArgs) SetReq(val *CommentListReq) {
	p.Req = val
}

func (p *InteractiveCommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractiveCommentListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractiveCommentListArgs(%+v)", *p)
}

func (p *InteractiveCommentListArgs) DeepEqual(ano *InteractiveCommentListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *InteractiveCommentListArgs) Field1DeepEqual(src *CommentListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_InteractiveCommentListArgs = map[int16]string{
	1: "req",
}

type InteractiveCommentListResult struct {
	Success *CommentListResp `thrift:"success,0,optional" frugal:"0,optional,CommentListResp" json:"success,omitempty"`
}

func NewInteractiveCommentListResult() *InteractiveCommentListResult {
	return &InteractiveCommentListResult{}
}

func (p *InteractiveCommentListResult) InitDefault() {
}

var InteractiveCommentListResult_Success_DEFAULT *CommentListResp

func (p *InteractiveCommentListResult) GetSuccess() (v *CommentListResp) {
	if !p.IsSetSuccess() {
		return InteractiveCommentListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractiveCommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*CommentListResp)
}

func (p *InteractiveCommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractiveCommentListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractiveCommentListResult(%+v)", *p)
}

func (p *InteractiveCommentListResult) DeepEqual(ano *InteractiveCommentListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InteractiveCommentListResult) Field0DeepEqual(src *CommentListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_InteractiveCommentListResult = map[int16]string{
	0: "success",
}

type InteractiveDeleteCommentArgs struct {
	Req *DeleteCommentReq `thrift:"req,1" frugal:"1,default,DeleteCommentReq" json:"req"`
}

func NewInteractiveDeleteCommentArgs() *InteractiveDeleteCommentArgs {
	return &InteractiveDeleteCommentArgs{}
}

func (p *InteractiveDeleteCommentArgs) InitDefault() {
}

var InteractiveDeleteCommentArgs_Req_DEFAULT *DeleteCommentReq

func (p *InteractiveDeleteCommentArgs) GetReq() (v *DeleteCommentReq) {
	if !p.IsSetReq() {
		return InteractiveDeleteCommentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *InteractiveDeleteCommentArgs) SetReq(val *DeleteCommentReq) {
	p.Req = val
}

func (p *InteractiveDeleteCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InteractiveDeleteCommentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractiveDeleteCommentArgs(%+v)", *p)
}

func (p *InteractiveDeleteCommentArgs) DeepEqual(ano *InteractiveDeleteCommentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *InteractiveDeleteCommentArgs) Field1DeepEqual(src *DeleteCommentReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_InteractiveDeleteCommentArgs = map[int16]string{
	1: "req",
}

type InteractiveDeleteCommentResult struct {
	Success *DeleteCommentResp `thrift:"success,0,optional" frugal:"0,optional,DeleteCommentResp" json:"success,omitempty"`
}

func NewInteractiveDeleteCommentResult() *InteractiveDeleteCommentResult {
	return &InteractiveDeleteCommentResult{}
}

func (p *InteractiveDeleteCommentResult) InitDefault() {
}

var InteractiveDeleteCommentResult_Success_DEFAULT *DeleteCommentResp

func (p *InteractiveDeleteCommentResult) GetSuccess() (v *DeleteCommentResp) {
	if !p.IsSetSuccess() {
		return InteractiveDeleteCommentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *InteractiveDeleteCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteCommentResp)
}

func (p *InteractiveDeleteCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InteractiveDeleteCommentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InteractiveDeleteCommentResult(%+v)", *p)
}

func (p *InteractiveDeleteCommentResult) DeepEqual(ano *InteractiveDeleteCommentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *InteractiveDeleteCommentResult) Field0DeepEqual(src *DeleteCommentResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_InteractiveDeleteCommentResult = map[int16]string{
	0: "success",
}

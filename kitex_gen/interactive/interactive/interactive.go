// Code generated by Kitex v0.12.1. DO NOT EDIT.

package interactive

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	interactive "wiliwili/kitex_gen/interactive"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"likeOperation": kitex.NewMethodInfo(
		likeOperationHandler,
		newInteractiveLikeOperationArgs,
		newInteractiveLikeOperationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"likeList": kitex.NewMethodInfo(
		likeListHandler,
		newInteractiveLikeListArgs,
		newInteractiveLikeListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"comment": kitex.NewMethodInfo(
		commentHandler,
		newInteractiveCommentArgs,
		newInteractiveCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"commentList": kitex.NewMethodInfo(
		commentListHandler,
		newInteractiveCommentListArgs,
		newInteractiveCommentListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"deleteComment": kitex.NewMethodInfo(
		deleteCommentHandler,
		newInteractiveDeleteCommentArgs,
		newInteractiveDeleteCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	interactiveServiceInfo                = NewServiceInfo()
	interactiveServiceInfoForClient       = NewServiceInfoForClient()
	interactiveServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return interactiveServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return interactiveServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return interactiveServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "Interactive"
	handlerType := (*interactive.Interactive)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "interactive",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func likeOperationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interactive.InteractiveLikeOperationArgs)
	realResult := result.(*interactive.InteractiveLikeOperationResult)
	success, err := handler.(interactive.Interactive).LikeOperation(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractiveLikeOperationArgs() interface{} {
	return interactive.NewInteractiveLikeOperationArgs()
}

func newInteractiveLikeOperationResult() interface{} {
	return interactive.NewInteractiveLikeOperationResult()
}

func likeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interactive.InteractiveLikeListArgs)
	realResult := result.(*interactive.InteractiveLikeListResult)
	success, err := handler.(interactive.Interactive).LikeList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractiveLikeListArgs() interface{} {
	return interactive.NewInteractiveLikeListArgs()
}

func newInteractiveLikeListResult() interface{} {
	return interactive.NewInteractiveLikeListResult()
}

func commentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interactive.InteractiveCommentArgs)
	realResult := result.(*interactive.InteractiveCommentResult)
	success, err := handler.(interactive.Interactive).Comment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractiveCommentArgs() interface{} {
	return interactive.NewInteractiveCommentArgs()
}

func newInteractiveCommentResult() interface{} {
	return interactive.NewInteractiveCommentResult()
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interactive.InteractiveCommentListArgs)
	realResult := result.(*interactive.InteractiveCommentListResult)
	success, err := handler.(interactive.Interactive).CommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractiveCommentListArgs() interface{} {
	return interactive.NewInteractiveCommentListArgs()
}

func newInteractiveCommentListResult() interface{} {
	return interactive.NewInteractiveCommentListResult()
}

func deleteCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interactive.InteractiveDeleteCommentArgs)
	realResult := result.(*interactive.InteractiveDeleteCommentResult)
	success, err := handler.(interactive.Interactive).DeleteComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractiveDeleteCommentArgs() interface{} {
	return interactive.NewInteractiveDeleteCommentArgs()
}

func newInteractiveDeleteCommentResult() interface{} {
	return interactive.NewInteractiveDeleteCommentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LikeOperation(ctx context.Context, req *interactive.LikeOperationReq) (r *interactive.LikeOperationResp, err error) {
	var _args interactive.InteractiveLikeOperationArgs
	_args.Req = req
	var _result interactive.InteractiveLikeOperationResult
	if err = p.c.Call(ctx, "likeOperation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LikeList(ctx context.Context, req *interactive.LikeListReq) (r *interactive.LikeListResp, err error) {
	var _args interactive.InteractiveLikeListArgs
	_args.Req = req
	var _result interactive.InteractiveLikeListResult
	if err = p.c.Call(ctx, "likeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Comment(ctx context.Context, req *interactive.CommentReq) (r *interactive.CommentResp, err error) {
	var _args interactive.InteractiveCommentArgs
	_args.Req = req
	var _result interactive.InteractiveCommentResult
	if err = p.c.Call(ctx, "comment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, req *interactive.CommentListReq) (r *interactive.CommentListResp, err error) {
	var _args interactive.InteractiveCommentListArgs
	_args.Req = req
	var _result interactive.InteractiveCommentListResult
	if err = p.c.Call(ctx, "commentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteComment(ctx context.Context, req *interactive.DeleteCommentReq) (r *interactive.DeleteCommentResp, err error) {
	var _args interactive.InteractiveDeleteCommentArgs
	_args.Req = req
	var _result interactive.InteractiveDeleteCommentResult
	if err = p.c.Call(ctx, "deleteComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

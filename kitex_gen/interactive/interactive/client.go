// Code generated by Kitex v0.12.1. DO NOT EDIT.

package interactive

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	interactive "wiliwili/kitex_gen/interactive"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	LikeOperation(ctx context.Context, req *interactive.LikeOperationReq, callOptions ...callopt.Option) (r *interactive.LikeOperationResp, err error)
	LikeList(ctx context.Context, req *interactive.LikeListReq, callOptions ...callopt.Option) (r *interactive.LikeListResp, err error)
	Comment(ctx context.Context, req *interactive.CommentReq, callOptions ...callopt.Option) (r *interactive.CommentResp, err error)
	CommentList(ctx context.Context, req *interactive.CommentListReq, callOptions ...callopt.Option) (r *interactive.CommentListResp, err error)
	DeleteComment(ctx context.Context, req *interactive.DeleteCommentReq, callOptions ...callopt.Option) (r *interactive.DeleteCommentResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kInteractiveClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kInteractiveClient struct {
	*kClient
}

func (p *kInteractiveClient) LikeOperation(ctx context.Context, req *interactive.LikeOperationReq, callOptions ...callopt.Option) (r *interactive.LikeOperationResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LikeOperation(ctx, req)
}

func (p *kInteractiveClient) LikeList(ctx context.Context, req *interactive.LikeListReq, callOptions ...callopt.Option) (r *interactive.LikeListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LikeList(ctx, req)
}

func (p *kInteractiveClient) Comment(ctx context.Context, req *interactive.CommentReq, callOptions ...callopt.Option) (r *interactive.CommentResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Comment(ctx, req)
}

func (p *kInteractiveClient) CommentList(ctx context.Context, req *interactive.CommentListReq, callOptions ...callopt.Option) (r *interactive.CommentListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentList(ctx, req)
}

func (p *kInteractiveClient) DeleteComment(ctx context.Context, req *interactive.DeleteCommentReq, callOptions ...callopt.Option) (r *interactive.DeleteCommentResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteComment(ctx, req)
}

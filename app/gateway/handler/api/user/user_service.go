// Code generated by hertz generator.

package user

import (
	"context"
	"wiliwili/app/gateway/pack"
	"wiliwili/app/gateway/rpc"
	"wiliwili/pkg/constants"
	"wiliwili/pkg/errno"
	"wiliwili/pkg/utils"

	api "wiliwili/app/gateway/model/api/user"
	"wiliwili/kitex_gen/user"

	"github.com/cloudwego/hertz/pkg/app"
)

// RegisterUser .
// @router api/v1/user/register [POST]
func RegisterUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	resp, err := rpc.RegisterUser(ctx, &user.UserRegisterReq{
		Username:  req.Username,
		Password:  req.Password,
		Email:     req.Email,
		Gender:    req.Gender,
		Signature: req.Signature,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// Login .
// @router api/v1/user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	resp, err := rpc.Login(ctx, &user.UserLoginReq{
		Uid:      req.ID,
		Password: req.Password,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	//utils.UserOnline(fmt.Sprintf("%d", resp.UserInfo.Uid), c)
	accessToken, refreshToken, err := utils.CreateAllToken(resp.UserInfo.Uid)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	c.Header(constants.AccessTokenHeader, accessToken)
	c.Header(constants.RefreshTokenHeader, refreshToken)
	pack.RespData(c, resp)
}

// GetProfile .

// @router api/v1/user/profile [GET]
func GetProfile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ProfileReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, err)
		return
	}

	resp, err := rpc.GetProfile(ctx, &user.UserProfileReq{
		Uid: req.UserId,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// UploadAvatar .
// @router api/v1/user/avatar [POST]
func UploadAvatar(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserAvatarUploadReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	file, err := c.FormFile("avatar")
	if err != nil {
		pack.RespError(c, err)
		return
	}
	if file == nil {
		pack.RespError(c, errno.Errorf(errno.ErrInvalidParams, "avatar file is required"))
		return
	}
	_, ok := utils.CheckImageFileType(file)
	if !ok {
		pack.RespError(c, errno.Errorf(errno.ErrInvalidParams, "invalid image file type"))
		return
	}
	data, err := utils.FileToBytes(file)
	if err != nil {
		pack.RespError(c, err)
		return
	}
	resp, err := rpc.UploadAvatar(ctx, &user.UserAvatarUploadReq{
		Uid:    req.UserId,
		Avatar: data,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, resp)
}

// GetAvatar .
// @router api/v1/user/getavatar [GET]
func GetAvatar(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserAvatarGetReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, err)
		return
	}

	resp, err := rpc.GetAvatar(ctx, &user.UserAvatarGetReq{
		Uid: req.Uid,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}

	pack.RespData(c, resp)
}

// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "wiliwili/app/user/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// UserAvatarGet provides a mock function with given fields: ctx, uid
func (_m *UserUseCase) UserAvatarGet(ctx context.Context, uid int64) (string, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for UserAvatarGet")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (string, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) string); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAvatarUpload provides a mock function with given fields: ctx, uid, avatar
func (_m *UserUseCase) UserAvatarUpload(ctx context.Context, uid int64, avatar []byte) (*model.Image, error) {
	ret := _m.Called(ctx, uid, avatar)

	if len(ret) == 0 {
		panic("no return value specified for UserAvatarUpload")
	}

	var r0 *model.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []byte) (*model.Image, error)); ok {
		return rf(ctx, uid, avatar)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []byte) *model.Image); ok {
		r0 = rf(ctx, uid, avatar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []byte) error); ok {
		r1 = rf(ctx, uid, avatar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserLogin provides a mock function with given fields: ctx, user
func (_m *UserUseCase) UserLogin(ctx context.Context, user *model.User) (*model.UserInfo, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UserLogin")
	}

	var r0 *model.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) (*model.UserInfo, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) *model.UserInfo); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserProfile provides a mock function with given fields: ctx, uid
func (_m *UserUseCase) UserProfile(ctx context.Context, uid int64) (*model.UserProfile, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for UserProfile")
	}

	var r0 *model.UserProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.UserProfile, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.UserProfile); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRegister provides a mock function with given fields: ctx, user
func (_m *UserUseCase) UserRegister(ctx context.Context, user *model.User) (int64, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UserRegister")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) (int64, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) int64); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

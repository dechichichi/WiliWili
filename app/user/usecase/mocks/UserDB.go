// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "wiliwili/app/user/domain/model"

	mock "github.com/stretchr/testify/mock"
)

// UserDB is an autogenerated mock type for the UserDB type
type UserDB struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserDB) CreateUser(ctx context.Context, user *model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GEtUserById provides a mock function with given fields: ctx, uid
func (_m *UserDB) GEtUserById(ctx context.Context, uid int64) (*model.User, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GEtUserById")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.User, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.User); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImage provides a mock function with given fields: ctx, imageid
func (_m *UserDB) GetImage(ctx context.Context, imageid int64) (*model.Image, error) {
	ret := _m.Called(ctx, imageid)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 *model.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.Image, error)); ok {
		return rf(ctx, imageid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Image); ok {
		r0 = rf(ctx, imageid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, imageid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserExist provides a mock function with given fields: ctx, username
func (_m *UserDB) IsUserExist(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for IsUserExist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreImage provides a mock function with given fields: ctx, image
func (_m *UserDB) StoreImage(ctx context.Context, image *model.Image) error {
	ret := _m.Called(ctx, image)

	if len(ret) == 0 {
		panic("no return value specified for StoreImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Image) error); ok {
		r0 = rf(ctx, image)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserDB creates a new instance of UserDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserDB {
	mock := &UserDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
